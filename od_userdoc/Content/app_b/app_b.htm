<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="20256" MadCap:lastWidth="1253">
    <head>
    </head>
    <body>
        <h1>Appendix B - Command Driver Manual</h1>
        <p><a href="#introduction" target="_self">Introduction</a>
        </p>
        <p><a href="#The_Command_Driver_control_window" target="_self">Command Driver control window</a>
        </p>
        <p><a href="#Executing_scripts_from_the_command_line" target="_self">Execution from command line</a>
        </p>
        <p><a href="#Window_management" target="_self">Window management</a>
        </p>
        <p><a href="#Search_keys" target="_self">Search keys</a>
        </p>
        <p><a href="#Identifiers_and_expressions" target="_self">Identifiers and expressions</a>
        </p>
        <p><a href="#Command_specifications" target="_self">Command specifications</a>
        </p>
        <p><a href="#Expressional" target="_self">Expressional specifications</a>
        </p>
        <p><a href="#Repetitive_task_example" target="_self">Repetitive task example</a>
        </p>
        <p><a href="#Standard_test_scripts" target="_self">Standard test scripts</a>
        </p>
        <p><a href="#User_history_recording" target="_self">User history recording</a>
        </p>
        <p>&#160;</p>
        <p>&#160;</p>
        <p><b><a name="introduction"></a>Introduction</b>
        </p>
        <p>Around 2006, it became clear that OpendTect was growing so fast that extensive testing of every part was becoming a real big task. This is a well known issue in the Agile development literature. The usual approach is to implement automated testing.</p>
        <p>&#160;</p>
        <p>When designing the implementation, the main issues we had to cope with were:</p>
        <blockquote>
            <ul>
                <li>A dynamic user interface that is defined by relations between fields. Therefore, the exact layout of windows can change considerably by small changes</li>
            </ul>
        </blockquote>
        <blockquote>
            <ul>
                <li>Small changes or fixes in algorithms can produce slightly different outputs for the same input</li>
            </ul>
        </blockquote>
        <blockquote>
            <ul>
                <li>A test system should be programmable, not just be a replay of previously run tasks</li>
            </ul>
        </blockquote>
        <p>Therefore, we couldn't use approaches based on replay of clicks, or comparison of outputs with known previous runs. Instead, we create a series of screen snapshots that can quickly be inspected by the test manager.</p>
        <p>&#160;</p>
        <p>This resulted in a Command Driver based on the following principles:</p>
        <blockquote>
            <ul>
                <li>Fields are addressed by names, wildcards supported</li>
            </ul>
        </blockquote>
        <blockquote>
            <ul>
                <li>Operations are defined to select, fill, push, manipulate, ...</li>
            </ul>
        </blockquote>
        <blockquote>
            <ul>
                <li>Additional flow control operations can be used</li>
            </ul>
        </blockquote>
        <blockquote>
            <ul>
                <li>Scripts can call other scripts</li>
            </ul>
        </blockquote>
        <blockquote>
            <ul>
                <li>Variables can be set or used from the environment</li>
            </ul>
        </blockquote>
        <p><b>Examples:</b>
        </p><pre xml:space="preserve">ListClick "Calculated attri*" "F03-2" Double</pre><pre xml:space="preserve">Include "$SCRIPTSDIR$/EvalutionEnergyAttrib.odcmd"</pre>
        <p>Almost immediately we noticed that finding out the names of the fields was very hard without some tool. Therefore, we made the 'Tooltip name guide', which will put OpendTect in a state where the name of a field is shown as a tool tip (overriding any existing tool tip). When it became clear that our automated test facility would be used as a scripting system for power users, we implemented a tool to record actions.</p>
        <p>&#160;</p>
        <p>A webinar held in March 2010 gave an extensive overview on the use of OpendTect's Command Driver plug-in. A forty-minutes flash video is available here: <a href="http://www.youtube.com/watch?v=aWzoDH_treY" target="_blank">Command Driver webinar</a></p>
        <p>&#160;</p>
        <p><b><a name="The_Command_Driver_control_window"></a>The Command Driver control window</b>
        </p>
        <p>Provided that the CmdDriver plug-in has been (auto)-loaded, one can access the Command Driver control window in two ways. Firstly, it can be launched from the menu bar of OpendTect Main Window:</p>
        <p>&#160;</p>
        <p><i>Utilities-&gt;Tools-&gt;Command Driver ...</i>
        </p>
        <p>&#160;</p>
        <p>Secondly, this so-called Command Controller also pops up when pressing Ctrl-R with the mouse pointer inside any OpendTect window or dialog. This is particularly useful if the Command Driver menu bar is greyed out or menu access is blocked after a modal dialog has been popped up. Only a few Qt-borrowed QDialogs like the QMessageBox, QFileDialog and QColorDialog will nevertheless prevent any user input to the Command Controller, and have to be clicked away first.</p>
        <p>&#160;</p>
        <p>
            <img src="../Resources/Images/Appendix B/Utilities tools command driver.png" class="General_Image" /> <img src="../Resources/Images/Appendix B/Utilities tools command driver record.png" class="General_Image" /></p>
        <p>&#160;</p>
        <p>"Command Controller (Ctrl-R)"-window in run-mode and record-mode respectively.</p>
        <p>&#160;</p>
        <p>The Command Controller has a combobox to switch between two appearances. One for running and one for recording a command file. The TooltipNameGuide checkbox can be (un)checked at both appearances. It sets a tooltip mode that displays the hidden name of any uiObject pointed to. Tooltip names are displayed double-quoted on a cyan background. Go to the Survey-&gt;Select/Setup window for a small demo-example. Click the '(X,Y) &lt;=&gt; I/C' -button and unveil the hidden names of buttons and input fields with your mouse pointer. OpendTect (plugin) developers might have a look in the file $WORK/src/uiIo/uiconvpos.cc to see how these names are annotated in the code.</p>
        <p>&#160;</p>
        <p>Running the Command Driver requires selecting an input command file with the extension '.odcmd', or the obsolete '.cmd'. Filenames without a full path are defined relative to the 'Proc'-directory of the current survey. The 'Edit'-button launches a simple text editor to view and edit the input command file directly from OpendTect. One can also specify an output log file to have the Command Driver write its progress and error messages. The 'Examine'-button launches a scroll window to view this log file even while running. The Command Driver starts running when pushing the 'Go'-button, after which 'Pause' and 'Abort'-buttons allow a temporary stop or premature termination.</p>
        <p>&#160;</p>
        <p>The Command Recorder is able to record a sequence of user interface actions performed by the user. One has to specify an output command file with the extension '.odcmd'. Filenames without a full path are defined relative to the 'Proc'-directory of the current survey. The 'Examine'-button launches a scroll window to view which commands are written during recording. Recording starts after pushing the 'Start'-button. Next perform a sequence of user actions and push the 'Finish'-button. The Command Controller will automatically switch to run-mode afterwards, so that one can play back the recorded script in order to verify its correct operation. View the log file for eventual errors. Finally, the recorded script can be edited to avoid these errors, improve robustness and general applicability, and insert auxiliary commands.</p>
        <p>&#160;</p>
        <p><b><a name="Executing_scripts_from_the_command_line"></a>Executing scripts from the command line</b>
        </p>
        <p>One does not necessarily have to run a command script from OpendTect's user interface. One or more scripts can also run straight from the command line, and with that they might be called from shell scripts as well. An example of the command line syntax on Linux:</p>
        <p>&#160;</p>
        <p><code>start_dtect cmd=/full_path_1/my_script_1.odcmd ... cmd=/full_path_N/my_script_N.odcmd</code>
        </p>
        <p>&#160;</p>
        <p>This line opens a new instance of OpendTect and starts running the given scripts in there. OpendTect will not automatically close when all scripts are finished. If necessary, this must be done from the last script using the 'Close All' command. Note that command line execution is only possible if your OpendTect auto-loads the Command Driver plug-in at startup.</p>
        <p>&#160;</p>
        <p>The user can also create command scripts named 'autoexec.odcmd'. If available, these scripts will be run at start-up before any script specified on the command line. The first autoexec-script to be run is searched in the settings directory. This is the '.od'-subdirectory of your personal home directory, unless the DTECT_SETTINGS or DTECT_WINSETTINGS environment variable specifies otherwise. The second autoexec-script to be run is searched in the 'Proc'-directory of the start-up survey. Next, the command line scripts will be run in order. Moreover, every time a new survey is selected in OpendTect, the 'Proc'-directory of this new survey will also be searched for an autoexec-script to be run at that moment.</p>
        <p>&#160;</p>
        <p>Apart from the availability of autoexec-scripts, their execution can always be disabled by adding 'cmd=noautoexec', 'cmd=nosettingsautoexec' or 'cmd=nosurveyautoexec' as an extra argument on the command line. Command line argument 'cmdlog=/full_path/my_odcmdlog.txt' will override the location of the output log file. Its default name is 'odcmdlog.txt' and it is located in the 'Proc'-directory of the start-up survey, if writable, or in the personal user directory otherwise.</p>
        <p>To run a command file other than 'autoexec.odcmd' on Windows, one has to create a DOS batch file. That file must contain a command line similar to this:</p>
        <p>&#160;</p>
        <p><code>X:\full_path_0\bin\win64\od_main cmd="X:\full_path_1\my_script_1.odcmd" ...</code>
        </p>
        <p>&#160;</p>
        <p>Go to your OpendTect installation folder to ascertain the right name and location of the OpendTect executable (i.e. which disk, bin-path, win32 / win64, and '.exe'-file name?). Executing your DOS batch file will open a new instance of OpendTect and run the given script at startup.</p>
        <p>&#160;</p>
        <p><b><a name="Window_management"></a>Window management</b>
        </p>
        <p>Commands always apply to the current window. This is OpendTect Main Window when starting the driver. Any modal window popping up will automatically become the current window. Modeless windows that pop up can be appointed current window by using the Window-command. In case a modal current window closes, its parent will become the current window. If a modeless current window closes, the latest former current window still existing will be restored as current window.</p>
        <p>&#160;</p>
        <p> Subwindows in the workspace of another window cannot become current window. No commands can be addressed to the progress window popped up by a uiTaskRunner, since the driver will await its decease before executing a next command. Neither addressible are the Command Controller window and its descendants.</p>
        <p>&#160;</p>
        <p>QDialog windows popping up are a special case. OpendTect is borrowing the QMessageBox, QFileDialog, QFontDialog, and QColorDialog from Qt. It is impossible for the command driver to manipulate the contents of these windows. The only QDialog parts that can be manipulated by the driver are those buttons resulting in closing the QDialog. One may use the standard commands Button, Ok, Cancel and Close for this aim. The special commands ColorOk, FileOk and FontOk will be available to specify the desired color, file, or font from the command script directly, meanwhile closing the QDialog.</p>
        <p>&#160;</p>
        <p>Neither can the command driver manipulate the contents of windows popped up by batch programs that were launched from OpendTect. An example of this is the multi-machines processing window. Except for manual intervention, there is no workaround yet.</p>
        <p>&#160;</p>
        <p>A higher form of window management is provided by the so-called window assertions. These are square-bracketed window names in between the command lines. All commands succeeding a window assertion are expected to be executed in the asserted window. If the current window does not match the latest window assertion, this results into the detection of an error. A window assertion is cancelled either by the next window assertion or by an empty assertion: [].</p>
        <p>&#160;</p>
        <p>The benefit of window assertions is in error recovery. If OpendTect does not pop up a window that was expected by the command file or does pop up a window that was not expected by the command file, the Command Driver is able to proceed under guidance of these window assertions. This already solves a lot of cases in which the flow of OpendTect happens to be mildly data or environment dependent. For example, if an error message like "File already exist! Overwrite?" appears but is not handled in the command file (or the other way around), the Command Driver can continue as it was most probably intended by the user: close the window and write the file. Another example is any command to switch on/off a button or menu item. If it happens to be switched on/off already, window assertions enable the Command Driver to skip all commands following from that switch as well.</p>
        <p>&#160;</p>
        <p>Although not compulsory, it is advised to make systematical use of window assertions. It also improves the readability of your command file. See any file generated by the Command Recorder to get an idea.</p>
        <p>&#160;</p>
        <p>When using window assertions in combination with control flow commands, the most easy-going and efficacious method is having each individual command (If, ElseIf, Then, Fi, For, Rof, DoWhile, Od, Do, OdUntil) both preceded and succeeded by the window assertion in force. Wrongly omitting a window assertion around a control flow command will not result in an assertion violation error, but it does severely reduce the possibilities of the Command Driver to recover in case of other errors.</p>
        <p>&#160;</p>
        <p><b><a name="Search_keys"></a>Search keys</b>
        </p>
        <p>Many commands supported by the Command Driver use search keys to address window names, names of buttons, input fields and other GUI-elements, item names of menus, lists, trees and tables, etc. The matching of these search keys is strict where necessary and accommodating where practical. The matching process honors the following principles:</p>
        <p>&#160;</p>
        <p>The asterisk '*' is used as a wildcard character. It may appear any number of times in the search key to match an arbitrary substring.</p>
        <p>&#160;</p>
        <p>Any sequence of white space characters like spaces, tabs, newlines, etc. will be removed at the beginning and at the end of both the match name and search key, and compressed into one single space when found in between.</p>
        <p>The ellipses found at the end of menu item names and button texts are ignored. Any dot after the last non-white space character of the match name and search key is removed.</p>
        <p>&#160;</p>
        <p>Underscores denoting keyboard shortcuts in menu item names, tab item names and button texts are ignored. The ampersands denoting these shortcuts in Qt-interface programming code should not appear in your search key, unless you want to match an actual ampersand of course.</p>
        <p>&#160;</p>
        <p>If the name to match contains a symbol interpreted by the Command Driver as something special, the symbol must be preceded by the escape character '@' in your search key. Symbols for which this may apply include '*', '#', '$', '`', '"', '[' and ']', depending on the context in which the search key occurs. Escaping of symbols that do not have a special meaning is unnecessary but harmless. In the rare case that the match name happens to contain '@' characters preceding a symbol, these themselves have to be escaped in the search key. Alpha-numerical and white space characters are not considered symbols, so a single '@' character in a search key like "jaap.glas@dgbes.com" does not have to be escaped.</p>
        <p>&#160;</p>
        <p>One example to demonstrate the use of escape characters. The table column header "* [All lines]" will be matched exactly by the search key "@* [All lines]". The asterisk must be escaped to prevent it from being interpreted as a wildcard for postfix matching, while the brackets do only need escapes when occurring inside window assertions.</p>
        <p>&#160;</p>
        <p>Any pair of bracket-like characters enclosing a name to match are ignored, unless the search key does explicitly specify them. Outer character pairs that may be stripped include "...", [...], &lt;...&gt;, and &gt;...&lt;. This matching protocol is recursive. If the match name and search key do not match, eventual outer brackets of the match name are removed, and the whole matching process is repeated.</p>
        <p>&#160;</p>
        <p>The Case-command allows the user to determine whether upper-case and lower-case alphabetical characters will match each other. The default is case-insensitive.</p>
        <p>&#160;</p>
        <p><b><a name="Identifiers_and_expressions"></a>Identifiers and expressions</b>
        </p>
        <p>Command scripts may contain identifiers to store data and (re)use its values. Every identifier consists of a letter followed by any sequence of letters, digits and underscores ('_'). Identifiers are treated case insensitive. Identifiers can represent constants, script variables, environment variables, built-in function names, or user-defined procedure names.</p>
        <p>&#160;</p>
        <p>The Command Driver has only one internal data type. All identifier values are represented as character strings. The string can be a boolean value, an integer value (even octal or hexadecimal), a fixed or floating point value, one single character or indeed a whole character string. The operator or built-in function using the identifier will define into which data type the string has to be converted, and will produce an error if the conversion fails. User-defined procedures should do the same. Boolean values are actually mapped onto numbers, where 0 is false and 1 is true, and any other number is also interpreted as true.</p>
        <p>&#160;</p>
        <p>Predefined identifier constants include FALSE==0, TRUE==1, PI==3.14159265..., and UNDEF==1e30. Command actions may assign either SUCCESS==1, FAILURE==0, or WARNING==-1 as return value. Any 'Is...On'-question command returns ON==1, OFF==0, or UNSWITCHABLE==-1 as an answer.</p>
        <p>&#160;</p>
        <p>Expressions are assembled from identifiers, numbers, string constants ( "..." ), parentheses, built-in functions, and about twenty mathematical and logical operators (see <a href="#Expressional" target="_self">Expressional specifications</a>). The assign command ( &lt;ident&gt; = &lt;expr&gt; ) stores the evaluated result of an expression into an identifier.</p>
        <p>&#160;</p>
        <p>The value of an identifier can be substituted anywhere in the command script by putting the identifier between dollar-signs ( $&lt;ident&gt;$ ). Identifier substitution is the only and most flexible method to give command actions a variable meaning. Multiple substitutions in one command are allowed, but nested substitutions will be misinterpreted. Assign the result of the inner substitution to an auxiliary identifier, and use that one in the outer substitution.</p>
        <p>&#160;</p>
        <p>In order to keep the parsing of command actions tractable, few commands will directly accept expressions as argument(s). Apart from the assign command, the only ones are control flow commands: If, ElseIf, For, DoWhile, OdUntil, Return, and any user-defined procedure call with value parameters. If you want to use an expression in an arbitrary command action, assign the expression result to an identifier and substitute its value.</p>
        <p>&#160;</p>
        <p>Identifier substitution can also be used to simulate array variables (e.g. array[index]). The Command Driver does not explicitly support them, but index substitution can be applied for that purpose: array_$index$.</p>
        <p>&#160;</p>
        <p>The predefined directory identifiers BASEDIR, DATADIR, PROCDIR, APPLDIR, USERDIR, SCRIPTSDIR, SNAPSHOTDIR, IMPORTDIR and EXPORTDIR are environment variables that can be substituted in file-path specifications. Their purpose is defining a file-path relatively to either OpendTect, the current survey, user directories, etc. The Command Driver will automatically change Unix-style file-paths into Windows-style file-paths on Windows-platforms and vice versa. The special identifier FILEIDX represents an integer variable that is automatically incremented after every occurrence in the command stream. It may be substituted in file-paths to generate unique filenames, although meanwhile more sophisticated methods exist as well (see <a href="#Repetitive_task_example" target="_self">Repetitive task example</a>).</p>
        <p>&#160;</p>
        <p>The scope of any identifier used in the body of a command script is global. The scope of any identifier used inside a user-defined procedure is local by default, and may shadow a global identifier with the same name. Attach the scope operator '@' in front of an identifier to force access to its global namesake. That is all for (re)assigning an identifier or (re)defining a procedure. Two extra scope rules apply for reading an identifier or calling a procedure. If an unscoped identifier value is locally undefined, the search will continue at the global scope level directly. If an unscoped procedure call is locally undefined, the search will continue at the previous scope level, and recursively descend to the global level as long as no definition is found.</p>
        <p>&#160;</p>
        <p><b><a name="Command_specifications"></a>Command specifications</b>
        </p>
        <p>Any text editor can be used to produce or modify OpendTect scripts. Every command file has to start with the following four-lines header. The correctness of version number, date and time is not vital for a successful execution of the command file.</p><pre xml:space="preserve">dTect V4.0</pre><pre xml:space="preserve">OpendTect commands</pre><pre xml:space="preserve">Mon Apr 20 09:20:09 2009</pre><pre xml:space="preserve">!</pre>
        <p>The Command Driver expects one command per line and one line per command by default. Multiple commands on one line must be separated by a semicolon (';'). Long commands exceeding the width of one line may be broken by adding a backslash ('\') as last non-white character on the line. Never put a break before white space, since preceding white space on the next line will be considered indentation. Instead of using a backslash break, one can also leave the Enter-key unpressed at all and simply have the line run through the right margin. Empty lines and (commentary) lines starting with a '#'-symbol are allowed and ignored.</p>
        <p>&#160;</p>
        <p>One can make a quick start by having the first command file generated by the Command Recorder, and start editing from there.</p>
        <p>&#160;</p>
        <p>The specification of available commands is currently written in a top-to-bottom sequential form. This means that command arguments are explained only at their first appearance. Placeholders between angular brackets are used to specify the command syntax. If a syntax placeholder is not defined at a particular command, it has already been defined at an earlier command or is considered atomic. The online user documentation will provide a hyper-link in the former case. Our tabular representation might cause lengthy command (argument) specifications to be formatted over multiple lines. Beware that the Command Driver itself will not accept this, unless the lines are explicitly broken by backslashes. All syntax definitions are using the following tags:</p>
        <p>&#160;</p>
        <table style="width: 100%;">
            <col style="width: 79px;" />
            <col style="width: 50%;" />
            <tbody>
                <tr>
                    <td>&lt;abc&gt;</td>
                    <td>syntax placeholder</td>
                </tr>
                <tr>
                    <td>| </td>
                    <td>	exclusive-or between alternatives</td>
                </tr>
                <tr>
                    <td>? </td>
                    <td>	zero or one occurrences</td>
                </tr>
                <tr>
                    <td>*</td>
                    <td> 	zero or more occurrences</td>
                </tr>
                <tr>
                    <td>+</td>
                    <td>one or more occurrences</td>
                </tr>
            </tbody>
        </table>
        <p>&#160;</p>
        <table style="width: 100%;border-collapse: separate;border-left-style: solid;border-left-width: 1px;border-right-style: solid;border-right-width: 1px;border-top-style: solid;border-top-width: 1px;border-bottom-style: solid;border-bottom-width: 1px;">
            <col style="width: 306px;" />
            <col style="width: 50%;" />
            <col />
            <tbody>
                <tr>
                    <td><i MadCap:targetName="action">&lt;action&gt;</i>
                    </td>
                    <td><b>I. Basic commands (also generated by Command Recorder)</b>
                    </td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="window">Window</b> "&lt;winname&gt;"</p>
                        <p>&#160;</p>
                        <p>

&lt;winname&gt; = &lt;searchstr&gt;&lt;disambiguator&gt;?
</p>
                        <p>&lt;searchstr&gt; = (&lt;wildcard&gt;?&lt;textstr&gt;)*&lt;wildcard&gt;?
</p>
                        <p>&lt;wildcard&gt; = '*'
</p>
                        <p>&#160;</p>
                        <p>
&lt;disambiguator&gt; = '#'&lt;selnr&gt;
</p>
                        <p>&lt;selnr&gt; = &lt;posint&gt; | &lt;negint&gt;
</p>
                    </td>
                    <td>Switches the focus between different windows on screen. Any window not having a modal child displayed may be specified as the new current window. This command is needed to access modeless windows, since only modal windows that pop up will automatically become the current window. Window names may contain one or more wildcards to match arbitrary substrings. If a (wildcarded) window name matches more than once, a number can be attached to disambiguate the search. Windows are numbered in order of appearance. A negative number will count the windows in reverse.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>'<b>[</b>' &lt;winname&gt;? '<b>]</b>'</td>
                    <td>This window assertion tells the Command Driver what is supposed to be the current window when the commands succeeding the assertion are processed. A mismatch will result into an error. The latest assertion is cancelled by either a next assertion or the empty assertion: [ ]. If a window assertion refers to a modeless window, it will be set as the new current window. This makes the Window-command above obsolete in case window assertions are used.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="menu">Menu</b> "&lt;menupath&gt;" &lt;onofftag&gt;? </p>
                        <p>&#160;</p>
                        <p>&lt;onofftag&gt; = (<b>On</b> | <b>1</b>) | (<b>Off</b> | <b>0</b>)</p>
                        <p>&#160;</p>
                        <p>&lt;menupath&gt; = &lt;pathstr&gt;</p>
                        <p>&lt;pathstr&gt; = &lt;itemname&gt;( &lt;sep&gt;&lt;itemname&gt; )*</p>
                        <p>&lt;sep&gt; = '`'</p>
                        <p>&#160;</p>
                        <p>&lt;itemname&gt; = &lt;searchstr&gt;&lt;disambiguator&gt;?</p>
                    </td>
                    <td>Selects a menu (sub)item by providing the whole menu path. Checkable menu items are toggled, unless the optional On/Off-argument specifies their desired state. Any search name provided to the Command Driver, including menu (item) names, may contain one or more wildcards to match arbitrary substrings. If a (wildcarded) item name matches more than once in a (sub)menu or any other list, a number can be attached to disambiguate the search. A negative number will count the matching items in reverse. To give a few exotic examples: the menu path "Survey`*#-1" would select the last item of the Survey-menu, while the path "Survey`#1" would refer to its first empty-named item.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="button">Button</b> "&lt;keystr&gt;" &lt;onofftag&gt;?

</p>
                        <p>&#160;</p>
                        <p>&lt;keystr&gt; = &lt;objname&gt;( &lt;sep&gt;&lt;objname&gt; )*&lt;disambiguator&gt;?
</p>
                        <p>&lt;objname&gt; = &lt;searchstr&gt;
</p>
                    </td>
                    <td>Press a (push/radio/check/tool)-button by providing one or more search keys. Multiple search keys are not allowed for QDialog windows. Checkable buttons are toggled, unless the optional On/Off-argument specifies their desired state. The best search key is of course the button name, but some objects do not have a (visible) name and lots of times names are not unique. Therefore, a key may just as well refer to another object in the neighbourhood of the button to click. The list of possible buttons will be narrowed down for every next key provided. If the referred object is closer to one button than another, the latter will be dropped. The vicinity criterion is based on the youngest common ancestor of referred object and button in the object tree. If the user is unable to specify a set of keys that leaves exactly one button, as a last resort one of the remaining buttons can be selected by attaching a disambiguation number after the last key. Beware that the order of those buttons will be fixed, but unlike menus not always in a left-right top-down fashion. The buttons will be counted in reverse in case the disambiguator is negative.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="buttonmenu">ButtonMenu</b> "&lt;keystr&gt;" "&lt;menupath&gt;" </p>
                        <p>&lt;onofftag&gt;?</p>
                    </td>
                    <td>Selects an item from the menu attached to a button. Some tool-buttons contain a left-clickable arrow part to have such a menu appeared. Checkable menu items are toggled, unless the optional On/Off-argument specifies their desired state. Selection of the button is analogous to the button selection described above. Selection of the menu (sub)item is analogous to the Menu-command.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="input">Input</b> "&lt;keystr&gt;" &lt;inpdata&gt;? &lt;entertag&gt;?</p>
                        <p>&#160;</p>
                        <p>&lt;entertag&gt; = <b>Enter</b> | <b>Hold</b></p>
                        <p>&#160;</p>
                        <p>&lt;inpdata&gt; = "&lt;inputstr&gt;" | &lt;number&gt; | <b>FilePath</b> "&lt;filepathstr&gt;"</p>
                    </td>
                    <td>Inputs a string or number into one of the fields of the current window. The field selection is analogous to the button selection described above. The Hold-option only triggers actions defined on changing the input field, while the Enter-option also triggers actions defined on pressing the enter/return-key afterwards. The latter is the default. If no input data is provided, the current contents of the selected field will be entered. The FilePath-option forces the input string to be treated as a file-path concerning platform independence. This will happen automatically in case the input string contains any directory identifier substitute ( $...DIR$ ), or in case the input field comes together with a Select-button and perhaps an Examine-button into a graphical element called uiFileInput.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="spin">Spin</b> "&lt;keystr&gt;" &lt;spinsteps&gt; &lt;entertag&gt;?

</p>
                        <p>&#160;</p>
                        <p>&lt;spinsteps&gt; = &lt;posint&gt; | &lt;negint&gt;
</p>
                    </td>
                    <td>Clicks a spinbox any number of steps upward (positive) or downward (negative). The spinbox selection is analogous to the button selection described above. The Hold-option only triggers actions defined on changing the spinbox value (after each step), while the Enter-option also triggers actions defined on the spinbox losing its focus afterwards. The latter is the default. If no number of steps is provided, the spinbox will keep its current value while losing its focus. Multiple steps are only supported as long as no action triggered in between does pop up a modal window. One can also edit the input field of the spinbox directly by using the Input-command instead.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="slider">Slider</b> "&lt;keystr&gt;" &lt;percentage&gt; &lt;nrsteps&gt;?

</p>
                        <p>&#160;</p>
                        <p>&lt;nrsteps&gt; = &lt;posint&gt;
</p>
                    </td>
                    <td>Shifts a slider towards the specified percentage of its range displayed on screen. Beware that the relationship between this percentage and the actual scale represented by the slider is not necessarily linear. It is optional to perform the shift in more than one step, but it may yield nice animations on screen. Multiple steps are only supported as long as no action triggered in between does pop up a modal window. Selecting the slider is analogous to the button selection described above.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="wheel">Wheel</b> "&lt;keystr&gt;" &lt;degrees&gt; &lt;nrsteps&gt;?</td>
                    <td>Rotates a thumbwheel a specified number of degrees upwards/downwards or leftwards/rightwards. The number of degrees will only have a direct meaning if the thumbwheel represents an angular scale. It is optional to perform the rotation in more than one step, but it may yield nice animations on screen. Multiple steps are only supported as long as no action triggered in between does pop up a modal window. Selecting the thumbwheel is analogous to the button selection described above.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="combo">Combo</b> "&lt;keystr&gt;" &lt;itemsel&gt;
</p>
                        <p>&#160;</p>
                        <p>
&lt;itemsel&gt; = "&lt;itemname&gt;" | &lt;selnr&gt;
</p>
                    </td>
                    <td>Sets the selected item of a combobox, either by its name or by its ordinal number in the list. The list will be traversed in reverse if the number is negative, so for instance -1 refers to the last item. Using a selection number is just a shortcut for composing an item name "*#&lt;selnr&gt;" from merely a wildcard and a disambiguator. The selection of the combobox itself is analogous to the button selection described above. The Input-command may be applied to edit the input field of the current item of an editable combobox.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="listclick">ListClick</b> "&lt;keystr&gt;" &lt;itemsel&gt; &lt;mousetag&gt;?
</p>
                        <p>&#160;</p>
                        <p>
&lt;mousetag&gt; = &lt;ctrlclick&gt;?&lt;doubleclick&gt;?&lt;leftrightclick&gt;?
</p>
                        <p>&#160;</p>
                        <p>
&lt;ctrlclick&gt; = <b>Ctrl
</b></p>
                        <p>&lt;doubleclick&gt; = <b>Double
</b></p>
                        <p>&lt;leftrightclick&gt; = <b>Left</b> | <b>Right
</b></p>
                    </td>
                    <td>Clicks and (de)selects precisely one item in a listbox. Selection possibilities for listbox and item are analogous to combobox selection. The optional mousetag is defining whether the item is (de)selected by means of optional control- or double-clicking of either the left or right mouse button. Left is default in all cases. Beware that the mousetag is one united word and order counts. Some listboxes pop up a menu when (right)-clicking on an item, in which case one has to apply the ListMenu-command instead. Single-selection listboxes will only select the clicked item and deselect all others. Multi-selection listboxes act different in the following cases. Control-clicking toggles the selected state of the clicked item, while any other item keeps its current state. Right-clicking an already selected item leaves the whole selection unchanged.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="listbutton">ListButton</b> "&lt;keystr&gt;" &lt;itemsel&gt; </p>
                        <p>&lt;mousetag&gt;? &lt;onofftag&gt;?</p>
                    </td>
                    <td>(Un)checks the button in front of a listbox item. The check-button is toggled unless the optional On/Off-argument specifies its desired state. (De)selection of item and listbox is fully analogous to the ListClick-command. Beware that mousetags with Double or Right are known not to have a (lasting) effect on the check-button.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="listmenu">ListMenu</b> "&lt;keystr&gt;" &lt;itemsel&gt; &lt;mousetag&gt;? "&lt;menupath&gt;" &lt;onofftag&gt;?</p>
                    </td>
                    <td>Selects a (sub)item from the menu attached to a listbox item. Checkable menu items are toggled, unless the optional On/Off-argument specifies their desired state. The selection of both listbox and item is analogous to the ListClick-command. However, since OpendTect is normally hiding its popup menus under the right mouse button, the default for no mousetag at all is set Right over here. Selection of the menu (sub)item is analogous to the Menu-command.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="listselect">ListSelect</b> "&lt;keystr&gt;" &lt;firstitemsel&gt; &lt;lastitemsel&gt;? &lt;onofftag&gt;?
</p>
                        <p />
                        <p>&lt;firstitemsel&gt; = &lt;lastitemsel&gt; = &lt;itemsel&gt;
</p>
                    </td>
                    <td>Selects any number of items in a multi-selection listbox. Selection possibilities are more comprehensive than those at the ListClick-command. Now all items matching a given (wildcarded) item name can be specified. One can also specify the whole range between a first and a last item at once. The list will be traversed cyclically in case the first item succeeds the last. Without the optional On/Off-argument, all specified items will be selected and all other items deselected. With the On/Off-argument set however, only specified items will be selected/deselected respectively, while unspecified items keep their current state.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="tableclick">TableClick</b> "&lt;keystr&gt;" &lt;tableitemsel&gt; &lt;mousetag&gt;?
</p>
                        <p>&#160;</p>
                        <p>
&lt;tableitemsel&gt; = &lt;headitemsel&gt; | &lt;cellsel&gt;

</p>
                        <p>&#160;</p>
                        <p>&lt;headitemsel&gt; = &lt;headtag&gt; &lt;itemsel&gt;
</p>
                        <p>&lt;headtag&gt; = <b>RowHead</b> | <b>ColHead</b><![CDATA[

]]></p>
                        <p>&#160;</p>
                        <p>&lt;cellsel&gt; = &lt;rowsel&gt; &lt;colsel&gt; | <b>Cell</b> &lt;itemsel&gt;
</p>
                        <p>&lt;rowsel&gt; = &lt;colsel&gt; = &lt;itemsel&gt;
</p>
                    </td>
                    <td>Clicks either a row-head, col-head or cell in a table, and select precisely the one row, column or cell attached to it. Selection possibilities for the RowHead-, ColHead- and Cell-options are analogous to the item selection for list- and comboboxes. The Cell-option puts all cells row-after-row in a virtual list for this purpose. Another way to address a single cell is by selecting both its row and its column. Also these row and column selections are analogous to the item selection just mentioned. If the row or column selection is not made by number but by name, then the search for a match will start in its header. In case the table shows no header or no row/col-head is matching, then the search will proceed in the next column/row until a match is found. The selection of the table itself is analogous to the button selection described above. The option specifying a left, right or double mouse-click will be Left by default. Some tables pop up a menu when right-clicking a cell, in which case one has to apply the TableMenu-command instead.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="tablefill">TableFill</b> "&lt;keystr&gt;" &lt;cellsel&gt; &lt;inpdata&gt;</td>
                    <td>Fills one cell in a table with new text data. Alike the Input-command, this might be a text string, a file-path string or a number. The selection of both table and cell is analogous to the TableClick-command, except that table headers cannot be filled.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="tablemenu">TableMenu</b> "&lt;keystr&gt;" &lt;cellsel&gt; &lt;mousetag&gt;? "&lt;menupath&gt;" &lt;onofftag&gt;?</p>
                    </td>
                    <td>Selects a (sub)item from the menu attached to a table cell. Checkable menu items are toggled, unless the optional On/Off-argument specifies their desired state. The selection of both table and cell is analogous to the TableFill-command. Selection of the menu (sub)item is analogous to the Menu-command.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="tableexec">TableExec</b> "&lt;keystr&gt;" &lt;cellsel&gt; &lt;action&gt;</td>
                    <td>
                        <p>Executes a local command driver action within one cell of a table (instead of within the current window). The selection of both table and cell is analogous to the TableFill-command. Only those commands accepting a keystring argument might be appropriate actions to execute within a cell. For example, if the top-left cell of a table contains a single combobox, its selection can be made as follows:

</p>
                        <p>&#160;</p>
                        <p><b>TableExec</b> "my table" 1 1 <b>Combo</b> "*" "my item"

</p>
                        <p>&#160;</p>
                        <p>Tables with cells containing multiple user-interface objects of the same or different kind can be handled too.
</p>
                    </td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="tableselect">TableSelect</b> "&lt;keystr&gt;" &lt;tableitemrangesel&gt; &lt;onofftag&gt;?
</p>
                        <p>&#160;</p>
                        <p>
&lt;tableitemrangesel&gt; = &lt;headitemrangesel&gt; | &lt;cellrangesel&gt;
</p>
                        <p>&lt;headitemrangesel&gt; = &lt;headtag&gt; &lt;firstitemsel&gt; &lt;lastitemsel&gt;?
</p>
                        <p>&#160;</p>
                        <p>
&lt;cellrangesel&gt; = &lt;firstcellsel&gt; &lt;lastcellsel&gt;?
</p>
                        <p>&lt;firstcellsel&gt; = &lt;lastcellsel&gt; = &lt;cellsel&gt;
</p>
                    </td>
                    <td>Selects any number of rows, columns or cells in a table. This command is the table-equivalent of the ListSelect-command. Selection possibilities are more comprehensive than those at the TableClick-command. Now all row-heads, col-heads or cells matching a given (wildcarded) item name can be specified. One can also specify the whole block between a first and a last row, column, or cell at once. The table will be traversed cyclically in case the first (cell) row or (cell) column succeeeds the last. Without the optional On/Off-argument, all specified cells will be selected and all other cells deselected. With the On/Off-argument set however, only specified cells will be selected/deselected respectively, while unspecified cells keep their current state.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="tab">Tab</b> "&lt;keystr&gt;"? "&lt;tabname&gt;"

</p>
                        <p>&#160;</p>
                        <p>&lt;tabname&gt; = &lt;itemname&gt;
</p>
                    </td>
                    <td>Puts a tab on top of the stack by name. Since windows with more than one tab-stack will be rare, its selection is optional. The selection is analogous to the button selection described above.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="treeclick">TreeClick</b> "&lt;keystr&gt;"? &lt;treenodesel&gt; &lt;mousetag&gt;?

</p>
                        <p>&#160;</p>
                        <p>&lt;treenodesel&gt; = "&lt;treepath&gt;" | PathCol "&lt;treepath&gt;" &lt;colsel&gt;
</p>
                        <p>&lt;treepath&gt; = &lt;pathstr&gt;
</p>
                    </td>
                    <td>Clicks and selects precisely one node in a tree. The selection of a tree node is analogous to the selection of a menu (sub)item. In which column to click is optional, but it will be the first one by default. This column selection is almost analogous to the column selection for tables. If the selection is not made by number but by name, then the search for a match will start in the column header, and next proceed at the selected tree node if not successful. Selection of the tree itself is analogous to the button selection described above. It is optional because the current window will often contain only one (data) tree. The data tree with the lowest scene number is guaranteed to be the default for OpendTect Main Window. The option to specify a left, right or double mouse-click will be Left by default. Any tree node might pop up a menu when right-clicking on one of its columns, in which case the TreeMenu-command has to be applied instead.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="treeexpand">TreeExpand</b> "&lt;keystr&gt;"? "&lt;treepath&gt;" &lt;onofftag&gt;?</p>
                    </td>
                    <td>(Un)expands the subtree of a node in a tree. The expander is toggled unless the optional On/Off-argument specifies its desired state. The selection of both tree and node is analogous to the TreeClick-command, except that column selection is not an issue here.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="treebutton">TreeButton</b> "&lt;keystr&gt;"? "&lt;treepath&gt;" &lt;mousetag&gt;? &lt;onofftag&gt;?</p>
                    </td>
                    <td>Presses the button in front of a node in a tree. The button is toggled unless the optional On/Off-argument specifies its desired state. The selection of both tree and node is analogous to the TreeClick-command, except that column selection is not an issue here.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="treemenu">TreeMenu</b> "&lt;keystr&gt;"? &lt;treenodesel&gt; &lt;mousetag&gt;? "&lt;menupath&gt;" &lt;onofftag&gt;?</p>
                    </td>
                    <td>Selects a (sub)item from the menu attached to a column of a tree node. Checkable menu items are toggled, unless the optional On/Off-argument specifies their desired state. The selection of tree, node and column is analogous to the TreeClick-command. Selection of the menu (sub)item is analogous to the Menu-command.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="canvasmenu">CanvasMenu</b> "&lt;keystr&gt;" "&lt;menupath&gt;" &lt;onofftag&gt;?</p>
                    </td>
                    <td>Selects a (sub)item from the menu popping up at a canvas area. Checkable menu items are toggled, unless the optional On/Off-argument specifies their desired state. Selection of the canvas area is analogous to the button selection described above. Selection of the menu (sub)item is analogous to the Menu-command.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p style="font-weight: bold;">Ok
</p>
                        <p style="font-weight: bold;">Cancel
</p>
                    </td>
                    <td>These are special commands that 'Ok' or 'Cancel' a dialog. Usually, this has the same effect as pressing the Ok- or Cancel-button.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="close">Close</b> &lt;closeoption&gt;?

</p>
                        <p>&#160;</p>
                        <p>&lt;closeoption&gt; = <b>All</b> | &lt;subwinsel&gt;

</p>
                        <p>&lt;subwinsel&gt; = "&lt;keystr&gt;"? "&lt;winname&gt;"
</p>
                    </td>
                    <td>Clicks on the Close-button in the title bar of the current window. The All-option will close all OpendTect windows at once. This option is compulsory in case OpendTect Main Window is the current window, so that OpendTect cannot be killed by accident. The optional subwindow selection is available to close a window in the workspace of the current window by name. Since windows with more than one workspace will be rare, selection of the workspace is optional. This selection is analogous to the button selection described above.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="show">Show</b> &lt;subwinsel&gt;? &lt;showtag&gt;
</p>
                        <p />
                        <p>&lt;showtag&gt; = <b>Minimized</b> | <b>Maximized</b> | <b>Normal
</b></p>
                    </td>
                    <td>Clicks on the Minimized-, Maximized- and Restore-buttons in the title bar of the current window. The optional subwindow selection is available to resize a window in the workspace of the current window by name. Since windows with more than one workspace will be rare, selection of the workspace is optional. This selection is analogous to the button selection described above.</td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="colorok">ColorOk</b> &lt;colorsel&gt;

</p>
                        <p>&#160;</p>
                        <p>&lt;colorsel&gt; = "&lt;rgbtcolorstr&gt;" | &lt;color&gt; &lt;transparency&gt;?
</p>
                        <p>&lt;color&gt; = "&lt;rgbcolorstr&gt;" | &lt;R&gt; &lt;G&gt; &lt;B&gt; | &lt;colortag&gt;
</p>
                        <p>&#160;</p>
                        <p>
&lt;rgbtcolorstr&gt; = &lt;rgbstr&gt;&lt;sep&gt;&lt;transparency&gt;
</p>
                        <p>&lt;rgbcolorstr&gt; = &lt;R&gt;&lt;sep&gt;&lt;G&gt;&lt;sep&gt;&lt;B&gt;

</p>
                        <p>&#160;</p>
                        <p>&lt;R&gt; = &lt;G&gt; = &lt;B&gt; = &lt;transparency&gt; = &lt;byte&gt;

</p>
                        <p>&#160;</p>
                        <p>&lt;colortag&gt; = <b>Black</b> | <b>Blue</b> | <b>Brown</b> | <b>Cyan</b> | <b>Green</b> | <b>Grey</b> | <b>Lilac</b> | <b>Lime</b> | <b>Magenta</b> | <b>Olive</b> | <b>Orange</b> | <b>Purple</b> | <b>Pink</b> | <b>Red</b> | <b>White</b> | <b>Yellow
</b></p>
                    </td>
                    <td>Specifies the desired color while closing a QColorDialog window. One may specify a color either by its RGB-values (0-255) or a color tag. In case the QColorDialog offers the possibility to specify transparency, the value of the optional t-channel (0-255) is passed as well. Its default value is 0 (non-transparent). The RGB-values and optional t-channel can also be specified in one composite RGB(t) color string. </td>
                    <td>&#160;</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="fileok">FileOk</b> "&lt;filepathset&gt;"

</p>
                        <p>&#160;</p>
                        <p>&lt;filepathset&gt; = &lt;filepathstr&gt;( &lt;sep&gt;&lt;filepathstr&gt; )*
</p>
                    </td>
                    <td>Specifies one, or more file-paths while closing a QFileDialog window. The command will yield an error message if their number, type (file/directory), extension, and/or writability is not in agreement with the current mode of the QFileDialog. File-paths will be interpreted platform independently. Both absolute and relative file-paths are accepted. The current directory of the QFileDialog will be taken as base directory in the latter case. Also a set of directory identifiers has been predefined for substitution ( $...DIR$ ) in file-paths. The FileOk-command does not provide the functionality of the QFileDialog-button "Create new folder". If a file-path specifies a non-existing file or directory, its parent directory must exist.</td>
                    <td>&#160;</td>
                </tr>
            </tbody>
        </table>
        <p>&#160;</p>
        <p><![CDATA[ 	]]></p>
        <table style="width: 100%;border-left-style: solid;border-left-width: 1px;border-right-style: solid;border-right-width: 1px;border-top-style: solid;border-top-width: 1px;border-bottom-style: solid;border-bottom-width: 1px;border-collapse: separate;">
            <col style="width: 306px;" />
            <col />
            <tbody>
                <tr>
                    <td><i>&lt;action&gt;</i>
                    </td>
                    <td><b>II. Auxiliary commands (to be inserted by the user)</b>
                    </td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="include">Include</b> "&lt;filepathstr&gt;"</td>
                    <td>Inserts another command file into the command stream. The file-path will be interpreted platform independently. In order to specify the file-path relative to either OpendTect, current survey, or user directories, one of the predefined directory identifiers can be substituted ( $...DIR$ ).</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="greyouts">GreyOuts</b> &lt;greyoutstag&gt;
</p>
                        <p>&#160;</p>
                        <p>
&lt;greyoutstag&gt; = <b>Count</b> | <b>Skip
</b></p>
                    </td>
                    <td>Specifies whether to count or skip disabled (greyed out) user interface objects, tabs, menu and tree items. 'Skip' is the default. 'Count' means that also grey-outs will be counted when using selection numbers. Furthermore, it allows (question) commands to retrieve information from grey-outs. Command actions trying to manipulate a grey-out will be penalized. </td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="case">Case</b> &lt;casetag&gt;
</p>
                        <p>&#160;</p>
                        <p>
&lt;casetag&gt; = <b>Sensitive</b> | <b>Insensitive</b><![CDATA[
]]></p>
                    </td>
                    <td>Switches between case-sensitive and case-insensitive searching in menus, windows, lists, etc. Insensitive is the default. The command parsing itself (command names and options, function names, identifier names) is case-insensitive by nature and will ignore this setting.</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="onerror">OnError</b> &lt;errortag&gt;

</p>
                        <p>&#160;</p>
                        <p>&lt;errortag&gt; = <b>Stop</b> | <b>Recover
</b></p>
                    </td>
                    <td>Switches between different procedures to handle an error. The Stop-option will exit the driver immediately. The Recover-option will make use of window assertions to safely proceed execution in specific cases. The default option is Recover.</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="logmode">LogMode</b> &lt;logtag&gt;

</p>
                        <p>&#160;</p>
                        <p>&lt;logtag&gt; = <b>Basic</b> | <b>Normal</b> | <b>All
</b></p>
                    </td>
                    <td>Regulates the amount of warning and error messages in the log file. The All-option will show any message generated. The Normal-option is the default. It shows all parsing messages, but action messages are only shown if the action result is not assigned to an identifier. The Basic-option will also omit all warning messages.</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="snapshot">Snapshot</b> "&lt;imagefilepathstr&gt;" &lt;frametag&gt;?

</p>
                        <p>&#160;</p>
                        <p>&lt;frametag&gt; = <b>CurWin</b> | <b>ODMain</b> | <b>Desktop</b></p>
                        <p>&#160;</p>
                        <p>

&lt;imagefilepathstr&gt; = &lt;filepathstr&gt;&lt;imageext&gt;
</p>
                        <p>&lt;imageext&gt; = <b>.bmp</b> | <b>.jpg</b> | <b>.jpeg</b> | <b>.png</b> | <b>.ppm</b> | <b>.xbm</b> | <b>.xpm</b><![CDATA[
]]></p>
                    </td>
                    <td>Writes a snapshot of the current window (and its environment) to file. The default grabbing area is bounded by the CurWin-frame, but can optionally be enlarged towards the ODMain-frame or the whole Desktop-frame. The snapshot filename must have one of the prescribed image extensions. The file-path will be interpreted platform independently. Both absolute and relative file-paths are accepted. Also one of the predefined directory identifiers may be substituted ( $...DIR$ ) in the file-path.</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="sleep">Sleep</b> &lt;seconds&gt; &lt;sleeptag&gt;?

</p>
                        <p>&#160;</p>
                        <p>&lt;sleeptag&gt; = <b>Regular</b> | <b>Extra
</b></p>
                    </td>
                    <td>Sleeps a period of time so that spectators can distinguish the consecutive steps from a command file on screen. The Regular-option will sleep until further notice between every two commands with a visual effect. The Extra-option is the default and will take an (additional) nap only once.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="wait">Wait</b> &lt;seconds&gt; &lt;sleeptag&gt;?</td>
                    <td>Tells the next command to wait a period of time only if it is uncertain whether it has finished processing. This can happen to any command closing a modal dialog that was already open when the Command Driver started. The Regular-option will allow this waiting time to every command until further notice. The Extra-option is the default and will allow an (additional) wait only to the next command.</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="pause">Pause</b> "&lt;textlines&gt;"?
</p>
                        <p>&#160;</p>
                        <p>
&lt;textlines&gt; = &lt;textstr&gt;( &lt;sep&gt;&lt;textstr&gt; )*
</p>
                    </td>
                    <td>Temporarily hold the execution of the command script and have the Command Controller pop up a message dialog with a 'Resume'-button so that the user can decide when to continue. Specifying lines of text is optional.</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="guide">Guide</b> "&lt;textlines&gt;" ( &lt;guidetag&gt; "&lt;winname&gt;" )?

</p>
                        <p>&#160;</p>
                        <p>&lt;guidetag&gt; = <b>Existent</b> | <b>Inexistent</b> | <b>Accessible</b> | <b>Inaccessible
</b></p>
                    </td>
                    <td>Temporarily hold the execution of the command script and have the Command Controller pop up a dialog requesting the user to take action. The text lines describe which actions the user has to perform. The Command Driver will automatically resume if some window matching a given name is no longer (in)existent or (in)accessible. If this option is not specified, the user gets a 'Done'-button to have the Command Driver resume manually.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="comment">Comment</b> "&lt;textlines&gt;"</td>
                    <td>Inserts comment lines into the log file. Command lines starting with a '#'-symbol are containing comments that are not shown in log files.</td>
                </tr>
            </tbody>
        </table>
        <p>&#160;</p>
        <p>&#160;</p>
        <table style="width: 100%;border-left-style: solid;border-left-width: 1px;border-right-style: solid;border-right-width: 1px;border-top-style: solid;border-top-width: 1px;border-bottom-style: solid;border-bottom-width: 1px;border-collapse: separate;">
            <col style="width: 306px;" />
            <col />
            <tbody>
                <tr>
                    <td><i>&lt;action&gt;</i>
                    </td>
                    <td><b><a name="table_iii"></a>III. Control flow commands (to be inserted by the user)</b>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="assign">Assign</b> &lt;ident&gt; &lt;expr&gt;
</p>
                        <p>&#160;</p>
                        <p>
&lt;ident&gt; '=' &lt;expr&gt; 

</p>
                        <p>&#160;</p>
                        <p>&lt;ident&gt; = &lt;scope&gt;?&lt;identstr&gt;
</p>
                        <p>&lt;identstr&gt; = &lt;letter&gt;&lt;identchars&gt;*
</p>
                        <p>&lt;identchars&gt; = &lt;letter&gt; | &lt;digit&gt; | '_'
&lt;scope&gt; = '@'

</p>
                        <p>&#160;</p>
                        <p>&lt;expr&gt; = &lt;ident&gt; | &lt;number&gt; | "&lt;textstr&gt;" | '(' &lt;expr&gt; ')' | &lt;functioncall&gt; | &lt;operatorexpr&gt; </p>
                        <p>&#160;</p>
                        <p>

&lt;functioncall&gt; = &lt;funcname&gt;'(' &lt;expressions&gt;? ')'
</p>
                        <p>&lt;funcname&gt; = &lt;ident&gt;
</p>
                        <p>&lt;expressions&gt; = &lt;expr&gt; ( ',' &lt;expr&gt; )*
</p>
                    </td>
                    <td>Assigns the evaluated result of an expression to an identifier. The command syntax is available in both procedural style and operator style. Identifiers consist of a letter followed by any sequence of letters, digits and underscores. Expressions are assembled from identifiers, numbers, string constants, parentheses, built-in functions, and about twenty mathematical and logical operators. Notice that a function call allows no space between the function name and its opening parenthesis. All functions, operators and predefined identifiers are listed below in Expressional specifications.</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="if">If</b> &lt;expr&gt;
&lt;actions&gt;
</p>
                        <p>&#160;</p>
                        <p>( <b>ElseIf</b> &lt;expr&gt;
&lt;actions&gt; )*
</p>
                        <p>&#160;</p>
                        <p>( <b>Else</b>
&lt;actions&gt; )?
</p>
                        <p>&#160;</p>
                        <p><b>Fi
</b>
                        </p>
                    </td>
                    <td>Executes a number of command actions if a boolean expression evaluates to true. The ElseIf- and Else-branches are optional, but note that the terminating Fi-command is compulsory.</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="for">For</b> &lt;ident&gt; '=' &lt;expr&gt; ( <b>To</b> &lt;expr&gt; )? ( <b>Step</b> &lt;expr&gt; )?
</p>
                        <p>&#160;</p>
                        <p>&lt;actions&gt;
</p>
                        <p>&#160;</p>
                        <p><b>Rof
</b>
                        </p>
                    </td>
                    <td>Initializes an identifier with the evaluated result of a numerical expression and repeats a number of command actions as long as the identifier value does not exceed the evaluated result of the optional To-expression. After every loop iteration, the identifier is incremented by the evaluated result of the optional Step-expression. The default step is 1, but even negative values are allowed. Only the Break-command can escape from a For-loop in absence of a To-expression. Note that the terminating Rof-command is compulsory. </td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="dowhile">DoWhile</b> &lt;expr&gt;
</p>
                        <p>&#160;</p>
                        <p>&lt;actions&gt;
</p>
                        <p>&#160;</p>
                        <p><b>Od
</b>
                        </p>
                    </td>
                    <td>Repeats the execution of a number of command actions as long as a boolean expression evaluates to true. Note that the terminating Od-command is compulsory.</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="do">Do
</b>
                        </p>
                        <p>&#160;</p>
                        <p>&lt;actions&gt;
</p>
                        <p>&#160;</p>
                        <p><b>OdUntil</b> &lt;expr&gt;
</p>
                    </td>
                    <td>Repeats the execution of a number of command actions until a boolean expression evaluates to true. </td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="break">Break</b>
                    </td>
                    <td>Escapes immediately from the innermost For-, While-, or Until-loop.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="continue">Continue</b>
                    </td>
                    <td>Skips the remaining actions in the current iteration of the innermost For-, While-, or Until-loop.</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="try">Try</b> &lt;ident&gt; &lt;action&gt;

</p>
                        <p>&#160;</p>
                        <p>&lt;ident&gt;? '~' &lt;action&gt;
</p>
                    </td>
                    <td>Tries to execute a command action and assigns its result to an identifier. The command syntax is available in both procedural style and operator style. The possible outcomes are success (1), failure (0) and warning (-1), for which the identifier constants SUCCESS, FAILURE and WARNING have been predefined. The operator style syntax is also usable without identifier for the side-effect, because error messages will be temporarily ignored.</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="questioncmd">Questioncmd</b> &lt;<b>questioncmd</b>&gt; &lt;ident&gt; &lt;questionargs&gt;
</p>
                        <p>&#160;</p>
                        <p>
&lt;ident&gt; '?' &lt;<b>questioncmd</b>&gt;&lt;questionargs&gt;
</p>
                    </td>
                    <td>Stores the answer from a question command into an identifier. The command syntax is available in both procedural style and operator style. All question commands implemented so far are listed below in Table IV to VII.</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="def">Def</b> ( &lt;returnpar&gt; '?' )? &lt;procname&gt;'(' &lt;valpars&gt;? ')' &lt;varpar&gt;* 
</p>
                        <p>&#160;</p>
                        <p>&lt;actions&gt;
</p>
                        <p>&#160;</p>
                        <p><b>Fed</b>
                        </p>
                        <p>&#160;</p>
                        <p>&lt;returnpar&gt; = &lt;varpar&gt;
</p>
                        <p>&lt;procname&gt; = &lt;ident&gt;</p>
                        <p>&lt;valpars&gt; = &lt;identstr&gt; ( ',' &lt;identstr&gt; )*</p>
                        <p>&lt;varpar&gt; = &lt;identstr&gt;</p>
                    </td>
                    <td>Specifies a user-defined procedure in which a number of command actions are executed. Note that the terminating Fed-command is compulsory. Nested procedure definitions are allowed. A definition may occur anywhere, as long as it precedes the first call to it. The course of a procedure depends on an optional number of value parameters (between the parentheses) and variable parameters (behind the parentheses). Procedure names can only be overloaded if there is a difference in the number of value or variable parameters. Distinction on data type is not possible, having only one internal (string) type. The optional return parameter is not counted at overloading, but acts like a variable parameter apart from that. It can be applied to give the procedure a more function-like appearance. Unlike built-in functions however, this does not at all mean that procedure calls can be used as (sub)expressions. </td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="return">Return</b> &lt;expr&gt;?</td>
                    <td>Escapes immediately from the current procedure. In case its definition includes a return parameter, it will be assigned with the optional expression that is returned. </td>
                </tr>
                <tr>
                    <td>( &lt;ident&gt; '?' )? <b MadCap:targetName="procname">&lt;procname&gt;</b>'<b>(</b>' &lt;expressions&gt;? '<b>)</b>' &lt;ident&gt;*</td>
                    <td>Calls a user-defined procedure specified earlier by means of the Def-command above. Its optional value parameters will accept expressions. Its optional return and variable parameters only accept identifiers, and these might be modified. Notice that a procedure call allows no space between the procedure name and its opening parenthesis.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="end">End</b>
                    </td>
                    <td>Finishes the command stream immediately.</td>
                </tr>
            </tbody>
        </table>
        <p>&#160;</p>
        <p>&#160;</p>
        <table style="width: 100%;border-left-style: solid;border-left-width: 1px;border-left-color: ;border-right-style: solid;border-right-width: 1px;border-right-color: ;border-top-style: solid;border-top-width: 1px;border-top-color: ;border-bottom-style: solid;border-bottom-width: 1px;border-bottom-color: ;margin-left: 0;margin-right: auto;">
            <col style="width: 306px;" />
            <col />
            <tbody>
                <tr>
                    <td><i MadCap:targetName="table4">&lt;questioncmd&gt; &lt;questionargs&gt;</i>
                    </td>
                    <td style="font-weight: bold;"><a name="question_commands"></a>IV. Question commands (to be inserted by the user)</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="ismatch">IsMatch</b> "&lt;searchstr&gt;" "&lt;textstr&gt;" &lt;casetag&gt;</td>
                    <td>True (1) if the text string matches the search key according to the rules described in the Search keys paragraph, false (0) otherwise. The identifier constants TRUE and FALSE have been predefined for convenience. If the optional case-sensitivity of the match is not specified, the global settings defined by the Case-command will apply. The options are 'Insensitive' or 'Sensitive'. </td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="iswindow">IsWindow</b> "&lt;winname&gt;"? &lt;winproptag&gt;?</p>
                        <p>&#160;</p>
                        <p>

&lt;winproptag&gt; = <b>Existent</b> | <b>Accessible</b> | <b>Modal</b> | <b>QDialog</b> | &lt;showtag&gt;
</p>
                    </td>
                    <td>True (1) if a specified window has a particular boolean property, false (0) otherwise. The optional property tells whether the window is either existent (default), accessible, modal, maximized, minimized, normal or a QDialog. The optional selection of the window is analogous to the Window-command. By default, the current window will be selected.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="ismenuitemon">IsMenuItemOn</b> "&lt;menupath&gt;"</td>
                    <td>On (1) if the selected menu (sub)item is checked, off (0) if it is unchecked, and unswitchable (-1) if it is not checkable at all. The identifier constants ON, OFF and UNSWITCHABLE have been predefined for convenience. The selection of the menu (sub)item is analogous to the Menu-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="nrmenuitems">NrMenuItems</b> "&lt;menupath&gt;?"</td>
                    <td>Returns the number of (enabled) items in the selected (sub)menu. The GreyOuts-command defines whether disabled items are counted as well. Selection of a sub-menu is analogous to the selection of menu items in the Menu-command. The root menu is denoted by an empty menu-path (""). Zero is returned if the menu-path leads to a leaf menu item. </td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="getmenuitem">GetMenuItem</b> "&lt;menupath&gt;" &lt;formtag&gt;?

</p>
                        <p>&#160;</p>
                        <p>&lt;formtag&gt; = <b>Text</b> | <b>Number
</b></p>
                    </td>
                    <td>Returns the text or number of a selected menu (sub)item. In which form is optional and 'Text' by default. In the 'Number' case, the GreyOuts-command defines whether disabled items are counted as well. Selection of the menu (sub)item is analogous to the Menu-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="isbuttonon">IsButtonOn</b> "&lt;keystr&gt;"</td>
                    <td>On (1) if the selected radio-, check-, or toolbar button is checked, off (0) if it is unchecked, and unswitchable (-1) in case of a push button or a non-checkable toolbar button. The identifier constants ON, OFF and UNSWITCHABLE have been predefined for convenience. The button selection is analogous to the Button-command.</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="getbutton">GetButton</b> "&lt;keystr&gt;" &lt;buttonformtag&gt;? </p>
                        <p>&#160;</p>
                        <p>

&lt;buttonformtag&gt; = <b>Text</b> | <b>Color
</b></p>
                    </td>
                    <td>Returns the text or color of a (push/radio/check/tool)-button. In which form is optional and 'Text' by default. The RGBt color string format returned in the 'Color' case is defined at the ColorOk-command. If the button has no text or color, an empty string or transparent white is returned respectively. The button selection is analogous to the Button-command. </td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="isbuttonmenuitemon">IsButtonMenuItemOn</b> "&lt;keystr&gt;" "&lt;menupath&gt;"</td>
                    <td>On (1) if the selected menu (sub)item of a button is checked, off (0) if it is unchecked, and unswitchable (-1) if it is not checkable at all. The selection of button and menu (sub)item is analogous to the ButtonMenu-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="nrbuttonmenuitems">NrButtonMenuItems</b> "&lt;keystr&gt;" "&lt;menupath&gt;?"</td>
                    <td>Returns the number of (enabled) items in the selected (sub)menu of a button. The GreyOuts-command defines whether disabled items are counted as well. The selection of button and sub-menu is analogous to the ButtonMenu-command. The root menu is denoted by an empty menu-path (""). Zero is returned if the menu-path leads to a leaf menu item. </td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="getbuttonmenuitem">GetButtonMenuItem</b> "&lt;keystr&gt;" "&lt;menupath&gt;" &lt;formtag&gt;?</td>
                    <td>Returns the text or number of the selected menu (sub)item of a button. In which form is optional and 'Text' by default. In the 'Number' case, the GreyOuts-command defines whether disabled items are counted as well. Selection of button and menu (sub)item is analogous to the ButtonMenu-command.</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="getinput">GetInput</b> "&lt;keystr&gt;" &lt;inputformtag&gt;?</p>
                        <p>&#160;</p>
                        <p> 

&lt;inputformtag&gt; = <b>Text</b> | <b>FilePath
</b></p>
                    </td>
                    <td>Returns the current content of a selected input field. In which form is optional and 'Text' by default. Selection of the input field is analogous to the Input-command. In case the input field comes together with a Select-button and perhaps an Examine-button into a graphical element called uiFileInput, the 'FilePath' option forces the current filename to be preceded by the absolute file path to the current selection directory. Otherwise an empty string will be returned. </td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="getspin">GetSpin</b> "&lt;keystr&gt;" &lt;spinformtag&gt;? </p>
                        <p>&#160;</p>
                        <p>

&lt;spinformtag&gt; = <b>Text</b> | <b>Value</b> | <b>Minimum</b> | <b>Maximum</b> | <b>Step
</b></p>
                    </td>
                    <td>Returns the text, value, minimum, maximum or step of the selected spinbox. In which form is optional and textual by default. Selection of the spinbox is analogous to the Spin-command.</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="getslider">GetSlider</b> "&lt;keystr&gt;" &lt;sliderformtag&gt;? </p>
                        <p>&#160;</p>
                        <p>

&lt;sliderformtag&gt; = <b>Text</b> | <b>Value</b> | <b>Minimum</b> | <b>Maximum</b> | <b>Percentage
</b></p>
                    </td>
                    <td>Returns the text, value, minimum, maximum or percentage of the selected slider. In which form is optional and textual by default. Beware that the returned percentage of the range displayed on screen will not necessarily have a linear relationship with the returned value. Selection of the slider is analogous to the Slider-command.</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="getwheel">GetWheel</b> "&lt;keystr&gt;" &lt;wheelformtag&gt;? </p>
                        <p>&#160;</p>
                        <p>

&lt;wheelformtag&gt; = <b>Text</b> | <b>Angle
</b></p>
                    </td>
                    <td>Returns the text or angle (in degrees) of the selected thumbwheel. In which form is optional and textual by default. Selection of the thumbwheel is analogous to the Wheel-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="nrcomboitems">NrComboItems</b> "&lt;keystr&gt;"</td>
                    <td>Returns the number of items in a selected combobox. The selection of the combobox is analogous to the Combo-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="curcomboitem">CurComboItem</b> "&lt;keystr&gt;" &lt;formtag&gt;?</td>
                    <td>Returns the text or number of the current combobox item. In which form is optional and textual by default. The selection of the combobox is analogous to the Combo-command. </td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="iscomboitemon">IsComboItemOn</b> "&lt;keystr&gt;" &lt;itemsel&gt;</td>
                    <td>On (1) if the specified combobox item is currently selected, and off (0) if it is currently deselected. Specification of the combobox and its item is analogous to the Combo-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="getcomboitem">GetComboItem</b> "&lt;keystr&gt;" &lt;itemsel&gt; &lt;formtag&gt;?</td>
                    <td>Returns the text or number of a selected combobox item. In which form is optional and textual by default. Selection of the combobox and its item is analogous to the Combo-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="nrtabs">NrTabs</b> "&lt;keystr&gt;"?</td>
                    <td>Returns the number of (enabled) tabs in a selected tab-stack. The GreyOuts-command defines whether disabled tabs are counted as well. The optional selection of the tab-stack is analogous to the Tab-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="curtab">CurTab</b> "&lt;keystr&gt;"? &lt;formtag&gt;?</td>
                    <td>Returns the text or number of the current tab. In which form is optional and 'Text' by default. In the 'Number' case, the GreyOuts-command defines whether disabled tabs are counted as well. The optional selection of the tab-stack is analogous to the Tab-command. </td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="istabon">IsTabOn</b> "&lt;keystr&gt;"? "&lt;tabname&gt;"</td>
                    <td>On (1) if the selected tab is currently on top, and off (0) if it is currently underneath. Selection of tab-stack and tab-name is analogous to the Tab-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="gettab">GetTab</b> "&lt;keystr&gt;"? "&lt;tabname&gt;" &lt;formtag&gt;?</td>
                    <td>Returns the text or number of a selected tab. In which form is optional and 'Text' by default. In the 'Number' case, the GreyOuts-command defines whether disabled tabs are counted as well. Selection of tab-stack and tab-name is analogous to the Tab-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="iscanvasmenuitemon">IsCanvasMenuItemOn</b> "&lt;keystr&gt;" "&lt;menupath&gt;"</td>
                    <td>On (1) if the selected menu (sub)item in the pop-up menu of a canvas area is checked, off (0) if it is unchecked, and unswitchable (-1) if it is not checkable at all. The selection of canvas area and menu (sub)item is analogous to the CanvasMenu-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="nrcanvasmenuitems">NrCanvasMenuItems</b> "&lt;keystr&gt;" "&lt;menupath&gt;?"</td>
                    <td>Returns the number of (enabled) items in the selected (sub)menu popping up at a canvas area. The GreyOuts-command defines whether disabled items are counted as well. The selection of canvas area and sub-menu is analogous to the CanvasMenu-command. The root menu is denoted by an empty menu-path (""). Zero is returned if the menu-path leads to a leaf menu item. </td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="getcanvasmenuitem">GetCanvasMenuItem</b> "&lt;keystr&gt;" "&lt;menupath&gt;" &lt;formtag&gt;?</td>
                    <td>Returns the text or number of the selected menu (sub)item in the pop-up menu of a canvas area. In which form is optional and 'Text' by default. In the 'Number' case, the GreyOuts-command defines whether disabled items are counted as well. The selection of canvas area and menu (sub)item is analogous to the CanvasMenu-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="isshown">IsShown</b> &lt;subwinsel&gt;? &lt;showtag&gt;</td>
                    <td>True (1) if a selected subwindow in the workspace of the current window is minimized, maximized, or normal size respectively, and false (0) otherwise. Specification of size property and optional subwindow is analogous to the Show-command. Not selecting a subwindow will yield the size properties of the current window itself.</td>
                </tr>
            </tbody>
        </table>
        <p>&#160;</p>
        <table style="width: 100%;border-left-style: solid;border-left-width: 1px;border-right-style: solid;border-right-width: 1px;border-top-style: solid;border-top-width: 1px;border-bottom-style: solid;border-bottom-width: 1px;border-collapse: separate;">
            <col style="width: 305px;" />
            <col />
            <tbody>
                <tr>
                    <td><i>&lt;questioncmd&gt; &lt;questionargs&gt;</i>
                    </td>
                    <td><b>V. List question commands (to be inserted by the user)</b>
                    </td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="nrlistitems">NrListItems</b> "&lt;keystr&gt;"</td>
                    <td>Returns the number of items in a selected listbox. The selection of the listbox is analogous to the ListClick-command.</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="curlistitem">CurListItem</b> "&lt;keystr&gt;" &lt;curtag&gt;? &lt;listformtag&gt;? 

</p>
                        <p>&#160;</p>
                        <p>&lt;curtag&gt; = <b>Framed</b> | <b>Selected</b>
&lt;listformtag&gt; = <b>Text</b> | <b>Number</b> | <b>Color
</b></p>
                    </td>
                    <td>Returns the text, number or background color of the current listbox item. In which form is optional and 'Text' by default. The RGBt color string format returned in the 'Color' case is defined at the ColorOk-command. If there is no current listbox item, an empty string, zero or transparent white is returned respectively. By default, the current listbox item is the one that is 'Framed'. Optionally, if precisely one item is 'Selected' (i.e. highlighted), it can be requested as current listbox item instead. The selection of the listbox is analogous to the ListClick-command. </td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="islistitemon">IsListItemOn</b> "&lt;keystr&gt;" &lt;itemsel&gt;</td>
                    <td>On (1) if a specified item in a listbox has been selected (i.e. highlighted), off (0) if it has been deselected, and unswitchable (-1) if the listbox does not support item selection at all. The specification of listbox and item is analogous to the ListClick-command. </td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="getlistitem">GetListItem</b> "&lt;keystr&gt;" &lt;itemsel&gt; &lt;listformtag&gt;?</td>
                    <td>Returns the text, number or background color of a selected listbox item. In which form is optional and 'Text' by default. The RGBt color string format returned in the 'Color' case is defined at the ColorOk-command. Selection of both listbox and item is analogous to the ListClick-command. </td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="islistbuttonon">IsListButtonOn</b> "&lt;keystr&gt;" &lt;itemsel&gt;</td>
                    <td>On (1) if the button in front of a listbox item is checked, and off (0) if it is unchecked. Selection of both listbox and item is analogous to the ListButton-command. </td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="islistmenuitemon">IsListMenuItemOn</b> "&lt;keystr&gt;" &lt;itemsel&gt; "&lt;menupath&gt;"</td>
                    <td>On (1) if the selected menu (sub)item of a listbox item is checked, off (0) if it is unchecked, and unswitchable (-1) if it is not checkable at all. The selection of the listbox, its item and the menu (sub)item is analogous to the ListMenu-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="nrlistmenuitems">NrListMenuItems</b> "&lt;keystr&gt;" &lt;itemsel&gt; "&lt;menupath&gt;?"</td>
                    <td>Returns the number of (enabled) items in the selected (sub)menu of a listbox item. The GreyOuts-command defines whether disabled items are counted as well. Selection of the listbox, its item and a sub-menu is analogous to the ListMenu-command. The root menu is denoted by an empty menu-path (""). Zero is returned if the menu-path leads to a leaf menu item. </td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="getlistmenuitem">GetListMenuItem</b> "&lt;keystr&gt;" &lt;itemsel&gt; "&lt;menupath&gt;" &lt;formtag&gt;?</td>
                    <td>Returns the text or number of the selected menu (sub)item of a listbox item. In which form is optional and 'Text' by default. In the 'Number' case, the GreyOuts-command defines whether disabled items are counted as well. The selection of the listbox, its item and the menu (sub)item is analogous to the ListMenu-command.</td>
                </tr>
            </tbody>
        </table>
        <p>&#160;</p>
        <table style="width: 100%;border-left-style: solid;border-left-width: 1px;border-right-style: solid;border-right-width: 1px;border-top-style: solid;border-top-width: 1px;border-bottom-style: solid;border-bottom-width: 1px;border-collapse: separate;">
            <col style="width: 304px;" />
            <col />
            <tbody>
                <tr>
                    <td><i>&lt;questioncmd&gt; &lt;questionargs&gt;</i>
                    </td>
                    <td style="font-weight: bold;">VI. Table question commands (to be inserted by the user)</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="nrtablerows">NrTableRows</b> "&lt;keystr&gt;"</td>
                    <td>Returns the number of rows in the selected table. The selection of the table is analogous to the TableClick-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="nrtablecols">NrTableCols</b> "&lt;keystr&gt;"</td>
                    <td>Returns the number of columns in the selected table. The selection of the table is analogous to the TableClick-command.</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="curtableitem">CurTableItem</b> "&lt;keystr&gt;" &lt;curtag&gt;? &lt;tableformtag&gt;? </p>
                        <p>&#160;</p>
                        <p>

&lt;tableformtag&gt; = <b>Text</b> | <b>Number</b> | <b>Color
</b></p>
                    </td>
                    <td>Returns the text, number or background color of the current table item. In which form is optional and 'Text' by default. The RGBt color string format returned in the 'Color' case is defined at the ColorOk-command. If there is no current table item, an empty string, zero or transparent white is returned respectively. Like the CurListItem-command, the current table item is by default the one that is 'Framed'. Optionally, if precisely one item is 'Selected' (i.e. highlighted), it can be requested as current table item instead. The selection of the table is analogous to the TableClick-command. </td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="curtablerow">CurTableRow</b> "&lt;keystr&gt;" &lt;curtag&gt;? &lt;tableformtag&gt;?</td>
                    <td>Returns the row-header text, number or background color of the current table row. In which form is optional and 'Text' by default. The RGBt color string format returned in the 'Color' case is defined at the ColorOk-command. If the table has no row header or no current row, an empty string, zero or transparent white is returned respectively. Like the CurListItem-command, the current table row is by default defined by the item that is 'Framed'. Optionally, if precisely one (entire row of) item(s) is 'Selected' (i.e. highlighted), the row at issue can be requested as current table row instead. The selection of the table is analogous to the TableClick-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="curtablecol">CurTableCol</b> "&lt;keystr&gt;" &lt;curtag&gt;? &lt;tableformtag&gt;?</td>
                    <td>Returns the column-header text, number or background color of the current table column. In which form is optional and 'Text' by default. The RGBt color string format returned in the 'Color' case is defined at the ColorOk-command. If the table has no column header or no current column, an empty string, zero or transparent white is returned respectively. Like the CurListItem-command, the current table column is by default defined by the item that is 'Framed'. Optionally, if precisely one (entire column of) item(s) is 'Selected' (i.e. highlighted), the column at issue can be requested as current table column instead. The selection of the table is analogous to the TableClick-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="istableitemon">IsTableItemOn</b> "&lt;keystr&gt;" &lt;tableitemsel&gt;</td>
                    <td>On (1) if a specified item in a table has been selected (i.e. highlighted), off (0) if it has been deselected, and unswitchable (-1) if the table does not support item selection at all. The specification of table and item is analogous to the TableClick-command. A row-head or col-head item is considered selected only if all table cells in that row or column are selected.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="gettableitem">GetTableItem</b> "&lt;keystr&gt;" &lt;cellsel&gt; &lt;tableformtag&gt;?</td>
                    <td>Returns the text, number or background color of a selected table cell. In which form is optional and 'Text' by default. In the 'Number' case, the table cells are counted row-by-row. The RGBt color string format returned in the 'Color' case is defined at the ColorOk-command. Selection of both table and cell is analogous to the TableFill-command. </td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="gettablerow">GetTableRow</b> "&lt;keystr&gt;" &lt;tableitemsel&gt; &lt;tableformtag&gt;?</td>
                    <td>Returns the row-header text, number or background color of a selected table item. In which form is optional and 'Text' by default. The RGBt color string format returned in the 'Color' case is defined at the ColorOk-command. Selection of both table and item is analogous to the TableClick-command. If the selected item is not a row-head item itself, it refers to the row-head item straight above it. </td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="gettablecol">GetTableCol</b> "&lt;keystr&gt;" &lt;tableitemsel&gt; &lt;tableformtag&gt;?</td>
                    <td>Returns the column-header text, number or background color of a selected table item. In which form is optional and 'Text' by default. The RGBt color string format returned in the 'Color' case is defined at the ColorOk-command. Selection of both table and item is analogous to the TableClick-command. If the selected item is not a col-head item itself, it refers to the col-head item left next to it.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="istablemenuitemon">IsTableMenuItemOn</b> "&lt;keystr&gt;" &lt;cellsel&gt; "&lt;menupath&gt;"</td>
                    <td>On (1) if the selected menu (sub)item of a table cell is checked, off (0) if it is unchecked, and unswitchable (-1) if it is not checkable at all. The selection of the table, its cell and the menu (sub)item is analogous to the TableMenu-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="nrtablemenuitems">NrTableMenuItems</b> "&lt;keystr&gt;" &lt;cellsel&gt; "&lt;menupath&gt;?"</td>
                    <td>Returns the number of (enabled) items in the selected (sub)menu of a table cell. The GreyOuts-command defines whether disabled items are counted as well. Selection of the table, its cell and a sub-menu is analogous to the TableMenu-command. The root menu is denoted by an empty menu-path (""). Zero is returned if the menu-path leads to a leaf menu item. </td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="gettablemenuitem">GetTableMenuItem</b> "&lt;keystr&gt;" &lt;cellsel&gt; "&lt;menupath&gt;" &lt;formtag&gt;?</td>
                    <td>Returns the text or number of the selected menu (sub)item of a table cell. In which form is optional and 'Text' by default. In the 'Number' case, the GreyOuts-command defines whether disabled items are counted as well. The selection of the table, its cell and the menu (sub)item is analogous to the TableMenu-command.</td>
                </tr>
            </tbody>
        </table>
        <p>&#160;</p>
        <table style="width: 100%;border-left-style: solid;border-left-width: 1px;border-right-style: solid;border-right-width: 1px;border-top-style: solid;border-top-width: 1px;border-bottom-style: solid;border-bottom-width: 1px;border-collapse: separate;">
            <col style="width: 304px;" />
            <col />
            <tbody>
                <tr>
                    <td><i>&lt;questioncmd&gt; &lt;questionargs&gt;</i>
                    </td>
                    <td><b>VII. Tree question commands (to be inserted by the user)</b>
                    </td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="nrtreeitems">NrTreeItems</b> "&lt;keystr&gt;"? "&lt;treepath&gt;?"</td>
                    <td>Returns the number of (enabled) items in a selected tree node. The GreyOuts-command defines whether disabled items are counted as well. The optional selection of the tree is analogous to the TreeClick-command. This also holds for its tree node, except that column selection is not an issue here. The root node is denoted by an empty tree path (""). Zero is returned if the tree path leads to a leaf tree item. </td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="nrtreecols">NrTreeCols</b> "&lt;keystr&gt;"?</td>
                    <td>Returns the number of columns in a tree. The optional selection of the tree is analogous to the TreeClick-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="curtreeitem">CurTreeItem</b> "&lt;keystr&gt;"? &lt;curtag&gt;? &lt;formtag&gt;?</td>
                    <td>Returns the text or number of the current tree item. In which form is optional and textual by default. In the 'Number' case, the GreyOuts-command defines whether disabled items are counted as well. If there is no current tree item, an empty string or zero is returned respectively. Like the CurListItem-command, the current tree item is by default the one that is 'Framed'. Optionally, if precisely one item is 'Selected' (i.e. highlighted), it can be requested as current tree item instead. The optional selection of the tree is analogous to the TreeClick-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="curtreepath">CurTreePath</b> "&lt;keystr&gt;"? &lt;curtag&gt;? &lt;formtag&gt;?</td>
                    <td>Returns the path to the current tree item. In which form is optional and textual by default. The 'Number' case is especially useful if 'Text' would yield an ambiguous tree path. The GreyOuts-command defines whether disabled items are counted as well. If there is no current tree item, an empty path ("") is returned. Like the CurListItem-command, the current tree item is by default the one that is 'Framed'. Optionally, if precisely one item is 'Selected' (i.e. highlighted), it can be requested as current tree item instead. The optional selection of the tree is analogous to the TreeClick-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="curtreecol">CurTreeCol</b> "&lt;keystr&gt;"? &lt;formtag&gt;?</td>
                    <td>Returns the column text or number of the current tree item. In which form is optional and textual by default. Note that the current tree item is merely column-specific in case of the default 'Framed' setting. The optional selection of the tree is analogous to the TreeClick-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="istreeitemon">IsTreeItemOn</b> "&lt;keystr&gt;"? "&lt;treepath&gt;"</td>
                    <td>On (1) if a specified item in a tree has been selected (i.e. highlighted), off (0) if it has been deselected, and unswitchable (-1) if the tree does not support item selection at all. Specification of the tree and its node is analogous to the TreeClick-command, except that column selection is not an issue here.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="istreeitemexpanded">IsTreeItemExpanded</b> "&lt;keystr&gt;"? "&lt;treepath&gt;"</td>
                    <td>True (1) if a specified item in a tree has been expanded, false (0) if it has been collapsed, and unexpandable (-1) if it is a leaf node. Beware that an expanded tree node can have a collapsed ancestor. Specification of the tree and its node is analogous to the TreeClick-command, except that column selection is not an issue here.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="gettreeitem">GetTreeItem</b> "&lt;keystr&gt;"? &lt;treenodesel&gt; &lt;formtag&gt;?</td>
                    <td>Returns the item number of a tree node or the text in one of its columns. In which form is optional and textual by default. In the 'Number' case, the GreyOuts-command defines whether disabled items are counted as well. The selection of the tree, its node and column is analogous to the TreeClick-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="gettreepath">GetTreePath</b> "&lt;keystr&gt;"? "&lt;treepath&gt;" &lt;formtag&gt;?</td>
                    <td>Returns the path to a selected tree node. In which form is optional and textual by default. In the 'Number' case, the GreyOuts-command defines whether disabled items are counted as well. It can be used for converting a path from one form to another. Specification of the tree and its node is analogous to the TreeClick-command, except that column selection is not an issue here.</td>
                </tr>
                <tr>
                    <td>
                        <p><b MadCap:targetName="gettreecol">GetTreeCol</b> "&lt;keystr&gt;"? &lt;treecolsel&gt; &lt;formtag&gt;?

</p>
                        <p>&#160;</p>
                        <p>&lt;treecolsel&gt; = &lt;colsel&gt; | <b>PathCol</b> "&lt;treepath&gt;" &lt;colsel&gt;
</p>
                    </td>
                    <td>Returns the text or number of a selected tree column. In which form is optional and textual by default. In the 'Number' case, the GreyOuts-command defines whether disabled items are counted as well. Selection of the tree, its column and an optional node is analogous to the TreeClick-command. If the column selection is made by name, the search for a match will start in the column header. If not successful, it proceeds at the specified tree node in the 'PathCol' case, or traverses all tree nodes breadth-first otherwise. </td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="istreebuttonon">IsTreeButtonOn</b> "&lt;keystr&gt;"? "&lt;treepath&gt;"</td>
                    <td>On (1) if the button in front of a tree node is checked, and off (0) if it is unchecked. Selection of both the tree and its node is analogous to the TreeButton-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="istreemenuitemon">IsTreeMenuItemOn</b> "&lt;keystr&gt;"? &lt;treenodesel&gt; "&lt;menupath&gt;"</td>
                    <td>On (1) if the selected menu (sub)item attached to a column of a tree node is checked, off (0) if it is unchecked, and unswitchable (-1) if it is not checkable at all. The selection of the tree, its node and column, and the menu (sub)item is analogous to the TreeMenu-command.</td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="nrtreemenuitems">NrTreeMenuItems</b> "&lt;keystr&gt;"? &lt;treenodesel&gt; "&lt;menupath&gt;?"</td>
                    <td>Returns the number of (enabled) items in the selected (sub)menu attached to a column of a tree node. The GreyOuts-command defines whether disabled items are counted as well. Selection of the tree, its node and column, and a sub-menu is analogous to the TreeMenu-command. The root menu is denoted by an empty menu-path (""). Zero is returned if the menu-path leads to a leaf menu item. </td>
                </tr>
                <tr>
                    <td><b MadCap:targetName="gettreemenuitem">GetTreeMenuItem</b> "&lt;keystr&gt;"? &lt;treenodesel&gt; "&lt;menupath&gt;" &lt;formtag&gt;?</td>
                    <td>Returns the text or number of the selected menu (sub)item attached to a column of a tree node. In which form is optional and 'Text' by default. In the 'Number' case, the GreyOuts-command defines whether disabled items are counted as well. The selection of the tree, its node and column, and the menu (sub)item is analogous to the TreeMenu-command.</td>
                </tr>
            </tbody>
        </table>
        <p>&#160;</p>
        <p><b><a name="Expressional"></a>Expressional specifications</b>
        </p>
        <p>The logical and mathematical operators to be applied in Command Driver expressions are almost equivalent to those used in OpendTect's <a href="../app_a/maths.htm" target="_self">mathematics attribute</a> definitions. Only the |x| operator is not provided to keep the parsing of expressions straightforward. Use the abs()-function instead. The AND-operator, OR-operator and conditional operator only evaluate their second (or third) sub-expression if needed for the result. For example, the reciprocal expression ( x==0 ? UNDEF : 1/x ) will not generate a division-by-zero error. The list of operators is sorted in order of precedence.</p>
        <p>&#160;</p>
        <table style="width: 100%;border-left-style: solid;border-left-width: 1px;border-right-style: solid;border-right-width: 1px;border-top-style: solid;border-top-width: 1px;border-bottom-style: solid;border-bottom-width: 1px;border-collapse: separate;">
            <col style="width: 110px;" />
            <col style="width: 100px;" />
            <col style="width: 190px;" />
            <col style="width: 25%;" />
            <tbody>
                <tr>
                    <td><i>Precedence</i>
                    </td>
                    <td style="font-style: italic;">Associativity</td>
                    <td><i MadCap:targetName="operatorexpr">&lt;operatorexpr&gt;</i>
                    </td>
                    <td style="font-weight: bold;">VIII. Logical and mathematical operators (to be used in expressions)</td>
                </tr>
                <tr>
                    <td>1</td>
                    <td>right-to-left</td>
                    <td>! &lt;expr&gt;</td>
                    <td>Logical not</td>
                </tr>
                <tr>
                    <td>&#160;</td>
                    <td>right-to-left</td>
                    <td>+ &lt;expr&gt;</td>
                    <td>Unary plus</td>
                </tr>
                <tr>
                    <td>&#160;</td>
                    <td>right-to-left</td>
                    <td>- &lt;expr&gt;</td>
                    <td>Unary minus</td>
                </tr>
                <tr>
                    <td>2</td>
                    <td>right-to-left</td>
                    <td>&lt;expr&gt; ^ &lt;expr&gt;</td>
                    <td>Raise to power</td>
                </tr>
                <tr>
                    <td>3</td>
                    <td>left-to-right</td>
                    <td>&lt;expr&gt; * &lt;expr&gt;</td>
                    <td>Multiplication</td>
                </tr>
                <tr>
                    <td>&#160;</td>
                    <td>left-to-right</td>
                    <td>&lt;expr&gt; / &lt;expr&gt;</td>
                    <td>Real division</td>
                </tr>
                <tr>
                    <td>&#160;</td>
                    <td>left-to-right</td>
                    <td>&lt;expr&gt; | &lt;expr&gt;</td>
                    <td>Integer division</td>
                </tr>
                <tr>
                    <td>&#160;</td>
                    <td>left-to-right</td>
                    <td>&lt;expr&gt; % &lt;expr&gt;</td>
                    <td>Modulo</td>
                </tr>
                <tr>
                    <td>4</td>
                    <td>left-to-right</td>
                    <td>&lt;expr&gt; + &lt;expr&gt;</td>
                    <td>Addition</td>
                </tr>
                <tr>
                    <td>&#160;</td>
                    <td>left-to-right</td>
                    <td>&lt;expr&gt; - &lt;expr&gt;</td>
                    <td>Subtraction</td>
                </tr>
                <tr>
                    <td>5</td>
                    <td>left-to-right</td>
                    <td>&lt;expr&gt; &lt; &lt;expr&gt;</td>
                    <td>Less than</td>
                </tr>
                <tr>
                    <td>&#160;</td>
                    <td>left-to-right</td>
                    <td>&lt;expr&gt; &lt;= &lt;expr&gt;</td>
                    <td>Less than or equal</td>
                </tr>
                <tr>
                    <td>&#160;</td>
                    <td>left-to-right</td>
                    <td>&lt;expr&gt; &gt; &lt;expr&gt;</td>
                    <td>Greater than</td>
                </tr>
                <tr>
                    <td>&#160;</td>
                    <td>left-to-right</td>
                    <td>&lt;expr&gt; &gt;= &lt;expr&gt;</td>
                    <td>Greater than or equal</td>
                </tr>
                <tr>
                    <td>6</td>
                    <td>left-to-right</td>
                    <td>&lt;expr&gt; == &lt;expr&gt;</td>
                    <td>Equality (numerical if possible, string otherwise)</td>
                </tr>
                <tr>
                    <td>&#160;</td>
                    <td>left-to-right</td>
                    <td>&lt;expr&gt; != &lt;expr&gt;</td>
                    <td>Inequality (numerical if possible, string otherwise)</td>
                </tr>
                <tr>
                    <td>7</td>
                    <td>left-to-right</td>
                    <td>&lt;expr&gt; &amp;&amp; &lt;expr&gt;</td>
                    <td>Logical AND</td>
                </tr>
                <tr>
                    <td>8</td>
                    <td>left-to-right</td>
                    <td>&lt;expr&gt; || &lt;expr&gt;</td>
                    <td>Logical OR</td>
                </tr>
                <tr>
                    <td>9</td>
                    <td>right-to-left</td>
                    <td>&lt;expr&gt; ? &lt;expr&gt; : &lt;expr&gt;</td>
                    <td>Conditional operator (if-then-else)</td>
                </tr>
            </tbody>
        </table>
        <p>&#160;</p>
        <p>The mathematical and statistical functions to be applied in Command Driver expressions are a superset of those used in OpendTect's <a href="../app_a/maths.htm" target="_self">mathematics attribute definitions</a>. Many other (string) functions have known equivalents in the C-library of the C++ programming language.</p>
        <p>&#160;</p>
        <table style="width: 100%;border-left-style: solid;border-left-width: 1px;border-right-style: solid;border-right-width: 1px;border-top-style: solid;border-top-width: 1px;border-bottom-style: solid;border-bottom-width: 1px;border-collapse: separate;">
            <col style="width: 304px;" />
            <col style="width: 50%;" />
            <tbody>
                <tr>
                    <td><i>&lt;functioncall&gt;</i>
                    </td>
                    <td style="font-weight: bold;">IX. Mathematical functions (to be used in expressions)</td>
                </tr>
                <tr>
                    <td>abs( &lt;expr&gt; )</td>
                    <td>Absolute value </td>
                </tr>
                <tr>
                    <td>acos( &lt;expr&gt; )</td>
                    <td>Arc cosine </td>
                </tr>
                <tr>
                    <td>asin( &lt;expr&gt; )</td>
                    <td>Arc sine </td>
                </tr>
                <tr>
                    <td>atan( &lt;expr&gt; )</td>
                    <td>Arc tangent between -PI/2 and PI/2 </td>
                </tr>
                <tr>
                    <td>atan2( &lt;y_expr&gt;, &lt;x_expr&gt; )</td>
                    <td>Arc tangent of y/x between -PI and PI </td>
                </tr>
                <tr>
                    <td>ceil( &lt;expr&gt; )</td>
                    <td>Smallest integer not less than </td>
                </tr>
                <tr>
                    <td>cos( &lt;expr&gt; )</td>
                    <td>Cosine </td>
                </tr>
                <tr>
                    <td>exp( &lt;expr&gt; )</td>
                    <td>Exponent </td>
                </tr>
                <tr>
                    <td>floor( &lt;expr&gt; )</td>
                    <td>Largest integer not greater than </td>
                </tr>
                <tr>
                    <td>ln( &lt;expr&gt; )</td>
                    <td>Natural logarithm </td>
                </tr>
                <tr>
                    <td>log( &lt;expr&gt; )</td>
                    <td>Base-10 logarithm </td>
                </tr>
                <tr>
                    <td>rand( &lt;max_expr&gt;? )</td>
                    <td>Uniform random value between 0 and optional maximum, 1 by default </td>
                </tr>
                <tr>
                    <td>randG( &lt;stddev_expr&gt;? )</td>
                    <td>Gaussian random value with mean 0 and optional standard deviation, 1 by default </td>
                </tr>
                <tr>
                    <td>round( &lt;expr&gt; )</td>
                    <td>Round to nearest integer </td>
                </tr>
                <tr>
                    <td>sgn( &lt;expr&gt; )</td>
                    <td>Sign (1 if greater than zero, 0 if zero, -1 if less than zero) </td>
                </tr>
                <tr>
                    <td>sin( &lt;expr&gt; )</td>
                    <td>Sine </td>
                </tr>
                <tr>
                    <td>sqrt( &lt;expr&gt; )</td>
                    <td>Square root </td>
                </tr>
                <tr>
                    <td>tan( &lt;expr&gt; )</td>
                    <td>Tangent </td>
                </tr>
                <tr>
                    <td>trunc( &lt;expr&gt; )</td>
                    <td>Round to integer in direction of zero </td>
                </tr>
            </tbody>
        </table>
        <p>&#160;</p>
        <table style="width: 100%;border-left-style: solid;border-left-width: 1px;border-right-style: solid;border-right-width: 1px;border-top-style: solid;border-top-width: 1px;border-bottom-style: solid;border-bottom-width: 1px;border-collapse: separate;">
            <col style="width: 304px;" />
            <col />
            <tbody>
                <tr>
                    <td><i>&lt;functioncall&gt;</i>
                    </td>
                    <td style="font-weight: bold;">X. Statistical functions (to be used in expressions)</td>
                </tr>
                <tr>
                    <td>avg( &lt;expressions&gt; )</td>
                    <td>Average </td>
                </tr>
                <tr>
                    <td>max( &lt;expressions&gt; )</td>
                    <td>Maximum </td>
                </tr>
                <tr>
                    <td>min( &lt;expressions&gt; )</td>
                    <td>Minimum </td>
                </tr>
                <tr>
                    <td>sum( &lt;expressions&gt; )</td>
                    <td>Sum</td>
                </tr>
                <tr>
                    <td>var( &lt;expressions&gt; )</td>
                    <td>Variance </td>
                </tr>
                <tr>
                    <td>med( &lt;expressions&gt; )</td>
                    <td>Median </td>
                </tr>
            </tbody>
        </table>
        <p>&#160;</p>
        <table style="width: 100%;border-top-left-radius: 0px;border-top-right-radius: 0px;border-bottom-right-radius: 0px;border-bottom-left-radius: 0px;border-left-style: solid;border-left-width: 1px;border-left-color: ;border-right-style: solid;border-right-width: 1px;border-right-color: ;border-top-style: solid;border-top-width: 1px;border-top-color: ;border-bottom-style: solid;border-bottom-width: 1px;border-bottom-color: ;">
            <col style="width: 304px;" />
            <col />
            <tbody>
                <tr>
                    <td><i>&lt;functioncall&gt;</i>
                    </td>
                    <td style="font-weight: bold;">XI. String functions (to be used in expressions)</td>
                </tr>
                <tr>
                    <td>curWindow()</td>
                    <td>Title of current window </td>
                </tr>
                <tr>
                    <td>isAlNum( &lt;expr&gt; )</td>
                    <td>True (1) if all characters are alpha-numerical, false (0) otherwise </td>
                </tr>
                <tr>
                    <td>isAlpha( &lt;expr&gt; )</td>
                    <td>True (1) if all characters are letters, false (0) otherwise </td>
                </tr>
                <tr>
                    <td>isDigit( &lt;expr&gt; )</td>
                    <td>True (1) if all characters are digits, false (0) otherwise </td>
                </tr>
                <tr>
                    <td>isInteger( &lt;expr&gt; )</td>
                    <td>True (1) if representing an integer, false (0) otherwise </td>
                </tr>
                <tr>
                    <td>isLower( &lt;expr&gt; )</td>
                    <td>True (1) if all characters are lower-case letters, false (0) otherwise </td>
                </tr>
                <tr>
                    <td>isNumber( &lt;expr&gt; )</td>
                    <td>True (1) if representing a number, false (0) otherwise </td>
                </tr>
                <tr>
                    <td>isSpace( &lt;expr&gt; )</td>
                    <td>True (1) if all characters are white space, false (0) otherwise </td>
                </tr>
                <tr>
                    <td>isUpper( &lt;expr&gt; )</td>
                    <td>True (1) if all characters are upper-case letters, false (0) otherwise </td>
                </tr>
                <tr>
                    <td>strCat( &lt;expressions&gt; )</td>
                    <td>String concatenation </td>
                </tr>
                <tr>
                    <td>strLen( &lt;expr&gt; )</td>
                    <td>String length in characters</td>
                </tr>
                <tr>
                    <td>strSel( &lt;str_expr&gt;, &lt;firstpos_expr&gt;, &lt;lastpos_expr&gt;? )</td>
                    <td>Character selection. Last position is optional. Negative positions count in reverse.</td>
                </tr>
                <tr>
                    <td>sepStrCat( &lt;expressions&gt; )</td>
                    <td>Concatenation of separation-strings (menu- and tree-paths, RGB(t) color strings) </td>
                </tr>
                <tr>
                    <td>sepStrLen( &lt;expr&gt; )</td>
                    <td>Number of separated substrings</td>
                </tr>
                <tr>
                    <td>sepStrSel( &lt;str_expr&gt;, &lt;firstpos_expr&gt;, &lt;lastpos_expr&gt;? )</td>
                    <td>Selection of separated substring(s). Last position is optional. Negative positions count in reverse.</td>
                </tr>
                <tr>
                    <td>toLower( &lt;expr&gt; )</td>
                    <td>Converts all letters to lower-case </td>
                </tr>
                <tr>
                    <td>toUpper( &lt;expr&gt; )</td>
                    <td>Converts all letters to upper-case</td>
                </tr>
                <tr>
                    <td>wildcard( &lt;selnr_expr&gt;? )</td>
                    <td>Matching substring for a wildcard in the latest successful wildcarded command action. Default selection number is 1. A negative number counts the wildcards in reverse.</td>
                </tr>
                <tr>
                    <td>wildcardStr( &lt;selnr_expr&gt;? )</td>
                    <td>The whole matching string around a wildcard in the latest successful wildcarded command action. Wildcard selection is analogous to the wildcard()-function above.</td>
                </tr>
            </tbody>
        </table>
        <p>&#160;</p>
        <p>All predefined identifier constants and environment variables are listed below. The Command Driver will automatically change Unix-style file-paths into Windows-style file-paths on Windows-platforms and vice versa. Redefining any predefined identifier will result in a warning, but is not forbidden. It allows the command script to overrule the values of the directory identifiers ( $...DIR$ ) as set by the system environment in which OpendTect is running. Or you can reset the "increment"-identifier FILEIDX with the start value you like. Beware that most of the predefined identifier constants are unfit for change. They are only there to make command scripts more readable. The Command Driver will keep using the original values internally! For example, you can exchange the values of TRUE and FALSE, but the function call isAlpha("a") still returns 1. Therefore, an expression like isAlpha("a")==TRUE would suddenly get an opposite meaning.</p>
        <p>&#160;</p>
        <table style="width: 100%;border-left-style: solid;border-left-width: 1px;border-left-color: ;border-right-style: solid;border-right-width: 1px;border-right-color: ;border-top-style: solid;border-top-width: 1px;border-top-color: ;border-bottom-style: solid;border-bottom-width: 1px;border-bottom-color: ;">
            <col style="width: 180px;" />
            <col style="width: 180px;" />
            <col style="width: 33%;" />
            <tbody>
                <tr>
                    <td><i>&lt;ident&gt;</i>
                    </td>
                    <td><i>$&lt;ident&gt;$</i>
                    </td>
                    <td style="font-weight: bold;">XII. Predefined identifiers (to be used in substitution and expressions)</td>
                </tr>
                <tr>
                    <td>
                        <p>TRUE
</p>
                        <p>FALSE
</p>
                    </td>
                    <td>
                        <p>1</p>
                        <p>0</p>
                    </td>
                    <td>Logical constants</td>
                </tr>
                <tr>
                    <td>PI</td>
                    <td>3.14159265 ...</td>
                    <td>Trigonometric constant</td>
                </tr>
                <tr>
                    <td>UNDEF</td>
                    <td>1e30</td>
                    <td>OpendTect's undefined value. Treated as such by all logical, mathematical, and statistical operators and functions defined above.</td>
                </tr>
                <tr>
                    <td>
                        <p>SUCCESS
</p>
                        <p>FAILURE
</p>
                        <p>WARNING
</p>
                    </td>
                    <td>
                        <p>1
</p>
                        <p>0
</p>
                        <p>-1
</p>
                    </td>
                    <td>Possible results of 'Try'-command</td>
                </tr>
                <tr>
                    <td>
                        <p>ON
</p>
                        <p>OFF
</p>
                        <p>UNSWITCHABLE
</p>
                    </td>
                    <td>
                        <p>1
</p>
                        <p>0
</p>
                        <p>-1
</p>
                    </td>
                    <td>Possible results of any 'Is...On'-question command</td>
                </tr>
                <tr>
                    <td>BASEDIR</td>
                    <td>&#160;</td>
                    <td>Base data directory ( setenv DTECT_[WIN]DATA )</td>
                </tr>
                <tr>
                    <td>DATADIR</td>
                    <td>$BASEDIR$/&lt;cur_survey&gt;</td>
                    <td>Survey directory</td>
                </tr>
                <tr>
                    <td>PROCDIR</td>
                    <td>$DATADIR$/Proc</td>
                    <td>Processing directory</td>
                </tr>
                <tr>
                    <td>APPLDIR</td>
                    <td>&#160;</td>
                    <td>Installed software directory ( setenv DTECT_[WIN]APPL )</td>
                </tr>
                <tr>
                    <td>USERDIR</td>
                    <td>&#160;</td>
                    <td>Personal home directory ( setenv DTECT_PERSONAL_DIR )</td>
                </tr>
                <tr>
                    <td>SCRIPTSDIR</td>
                    <td>$PROCDIR$</td>
                    <td>Overruled by setenv DTECT_SCRIPTS_DIR</td>
                </tr>
                <tr>
                    <td>SNAPSHOTSDIR</td>
                    <td>$DATADIR$/Snapshots</td>
                    <td>Overruled by setenv DTECT_SNAPSHOTS_DIR</td>
                </tr>
                <tr>
                    <td>IMPORTDIR</td>
                    <td>$DATADIR$/Import</td>
                    <td>Overruled by setenv DTECT_IMPORT_DIR</td>
                </tr>
                <tr>
                    <td>EXPORTDIR</td>
                    <td>$DATADIR$/Export</td>
                    <td>Overruled by setenv DTECT_EXPORT_DIR</td>
                </tr>
                <tr>
                    <td>FILEIDX</td>
                    <td>1000++</td>
                    <td>Integer variable that is automatically incremented after every occurrence in the command stream. It may be substituted in file-paths to generate unique filenames.</td>
                </tr>
            </tbody>
        </table>
        <p>&#160;</p><b><a name="Repetitive_task_example"></a>Repetitive task example</b>
        <p>One of the recurring user questions about OpendTect is whether there is a quick way to do some kind of repetitive task. Loading a huge amount of wells, importing multiple 2D line SEG-Y data, etc. Such a service can only be offered by OpendTect itself if the task is very simple, common and straightforward. For example, one does have the possibility to select multiple horizons with the mouse in order to load them in one go. However, if the repetitive task is more complex, unique, or variant, the workflow can be automatized by means of a command script.</p>
        <p>&#160;</p>
        <p>The current Command Driver capabilities are demonstrated by automizing a case raised by Magnus Lidgren. His scene contained a big number of 2D lines, and a number of attributes on each line. He needed to generate a picture for every attribute of every 2D line, and wanted to avoid doing that manually.</p>
        <p>&#160;</p>
        <p>Automizing a repetitive task consists of three stages. Firstly, the Command Recorder is applied to record the mouse and keyboard actions needed to perform the task once. Secondly, a text editor is used to modify the recorded script. Some of the recorded actions have to be generalized, and a few new commands have to be added to make the script iterative. These commands are listed in <a href="#table_iii" target="_self">Table III</a>. Thirdly, the Command Driver is applied to run the modified script, initially to debug it and finally to perform the repetitive task.</p>
        <p>&#160;</p>
        <p>Listed below is the recorded command script that makes a snapshot of one attribute on one 2D line. The passages that need to be generalized have been printed in red.</p>
        <p>&#160;</p><pre xml:space="preserve">[OpendTect Main Window]</pre><pre xml:space="preserve">TreeMenu "2D Seismics`<span style="color: #ff0000;">LS 5k`i5007`Seis</span>" "Display in a 2D Viewer as`VD"</pre><pre xml:space="preserve">&#160;</pre><pre xml:space="preserve">[2D Viewer - Line: <span style="color: #ff0000;">i5007</span>]</pre><pre xml:space="preserve">Button "Save image"</pre><pre xml:space="preserve">&#160;</pre><pre xml:space="preserve">[Create snapshot]</pre><pre xml:space="preserve">Button "Screen" On</pre><pre xml:space="preserve">Input "Select filename" "/d43/jaap/surveys/Demo2D/Snapshots/dump.png" Hold</pre><pre xml:space="preserve">Button "Ok"</pre><pre xml:space="preserve">&#160;</pre><pre xml:space="preserve">[2D Viewer - Line: <span style="color: #ff0000;">i5007</span>]</pre><pre xml:space="preserve">Close</pre><pre xml:space="preserve">&#160;</pre><pre xml:space="preserve">[OpendTect Main Window]</pre>
        <p>&#160;</p>
        <p>Listed below is the modified command script after it has been generalized and made iterative. All changes with regard to the originally recorded script have been printed in green.</p>
        <p>&#160;</p><pre xml:space="preserve"><span style="color: #008000;">Def res ? dumpAttribute( setnr, namenr, attrnr )</span></pre><pre xml:space="preserve">[OpendTect Main Window]</pre><pre xml:space="preserve">res ~ TreeMenu "2D Seismics`<span style="color: #008000;">*#$setnr$`*#$namenr$`*#$attrnr$</span>" \</pre><pre xml:space="preserve">		"Display`2D Viewer - VD"</pre><pre xml:space="preserve" style="color: #008000;">If res==FAILURE ; Return ; Fi</pre><pre xml:space="preserve" style="color: #008000;">&#160;</pre><pre xml:space="preserve" style="color: #008000;">pic_name = strCat( wildcard(1), "_", wildcard(2), "_" )</pre><pre xml:space="preserve" style="color: #008000;">pic_name = strCat( pic_name, wildcard(3), ".png" )</pre><pre xml:space="preserve" style="color: #008000;">&#160;</pre><pre xml:space="preserve">[2D Viewer - Line: *]</pre><pre xml:space="preserve">Button "Save image"</pre><pre xml:space="preserve">&#160;</pre><pre xml:space="preserve">[Create snapshot]</pre><pre xml:space="preserve">Button "Screen" On</pre><pre xml:space="preserve">Input "Select filename" "$SNAPSHOTSDIR$/$pic_name$" Hold</pre><pre xml:space="preserve">Button "Ok"</pre><pre xml:space="preserve">&#160;</pre><pre xml:space="preserve">[2D Viewer - Line: *]</pre><pre xml:space="preserve">Close</pre><pre xml:space="preserve">&#160;</pre><pre xml:space="preserve">[OpendTect Main Window]</pre><pre xml:space="preserve" style="color: #008000;"><span style="color: #008000;">Fed</span></pre>
        <p style="color: #008000;">&#160;</p><pre xml:space="preserve" style="color: #008000;">For setidx = 1</pre><pre xml:space="preserve" style="color: #008000;">For nameidx = 1</pre><pre xml:space="preserve" style="color: #008000;">For attridx = 1</pre><pre xml:space="preserve" style="color: #008000;">res ? dumpAttribute( setidx, nameidx, attridx )</pre><pre xml:space="preserve" style="color: #008000;">If !res ; Break ; Fi</pre><pre xml:space="preserve" style="color: #008000;">Rof</pre><pre xml:space="preserve" style="color: #008000;">If attridx==1 ; Break ; Fi</pre><pre xml:space="preserve" style="color: #008000;">Rof</pre><pre xml:space="preserve" style="color: #008000;">If nameidx==1 ; Break ; Fi</pre><pre xml:space="preserve" style="color: #008000;">Rof</pre>
        <p>&#160;</p>
        <p>The command script example above demonstrates a number of more advanced Command Driver features:</p>
        <blockquote>
            <ul>
                <li>Def-inition of procedure(s) to modularize, reuse and/or hide command sequences.</li>
            </ul>
        </blockquote>
        <blockquote>
            <ul>
                <li>"Try"-command ( res ~ ... ) to check whether a command executes.</li>
            </ul>
        </blockquote>
        <blockquote>
            <ul>
                <li>Wildcards ('*') to match arbitrary substrings.</li>
            </ul>
        </blockquote>
        <blockquote>
            <ul>
                <li>Disambiguators ('#') to select the n-th match out of multiple matches.</li>
            </ul>
        </blockquote>
        <blockquote>
            <ul>
                <li>Substitution ( $...$ ) of identifier values into command actions.</li>
            </ul>
        </blockquote>
        <blockquote>
            <ul>
                <li>Backslash ('\') to spread a long command over multiple lines.</li>
            </ul>
        </blockquote>
        <blockquote>
            <ul>
                <li>	If-command to execute command actions conditionally.</li>
            </ul>
        </blockquote>
        <blockquote>
            <ul>
                <li>Use of predefined identifiers: constant FAILURE and environment variable SNAPSHOTSDIR.</li>
            </ul>
        </blockquote>
        <blockquote>
            <ul>
                <li>Semicolons (';') to separate multiple commands on one line.</li>
            </ul>
        </blockquote>
        <blockquote>
            <ul>
                <li>Return-command to terminate a procedure immediately.</li>
            </ul>
        </blockquote>
        <blockquote>
            <ul>
                <li>Use of assignment and built-in function calls ( pic_name = strCat(...,...) ).</li>
            </ul>
        </blockquote>
        <blockquote>
            <ul>
                <li>Wildcard(.)-function to get matching strings from the latest successful wildcarded command action. Note that these strings must be secured before the next use of a wildcard ( i.e. in window assertion [2D Viewer - Line: *] ).</li>
            </ul>
        </blockquote>
        <blockquote>
            <ul>
                <li>(For)-loops to make a script iterative.</li>
            </ul>
        </blockquote>
        <blockquote>
            <ul>
                <li>Call to a user-defined procedure ( res ? dumpAttribute(...,...) )</li>
            </ul>
        </blockquote>
        <blockquote>
            <ul>
                <li>Break-command to escape from loops immediately.</li>
            </ul>
        </blockquote>
        <p>Note that different operators are used to store the result of an expression (=), a command action (~), or either a user-defined procedure (?) or a question command (?) into an identifier. This eases the parsing of commands by the Command Driver, and it should make the user aware that the allowed complexity of (sub)-expressions does not go beyond the built-in function calls. The results of command actions, user-defined procedure calls, and question commands have to be assigned to auxiliary identifiers first.</p>
        <p>&#160;</p>
        <p>The introduction of <a href="#question_commands" target="_self">question commands</a> allows the body of the previous script to be written in a different style. An identifier can take the answer to one of the many questions (Nr..., Cur..., Is..., Get...) from <a href="#question_commands" target="_self">Table IV to VII</a> about some property of a user-interface element. Instead of applying the Break-command to escape from loops when the procedure call to dumpAttribute(...,...) fails, now the number of items to iterate over can be asked and set before entering a loop ( nritems ? NrTreeItems ... ). Note that a procedure defined with a return parameter can also be called without. Listed below is the restyled body of the command script above.</p>
        <p>&#160;</p><pre xml:space="preserve" style="color: #008000;">nrsets ? NrTreeItems "2D Seismics"</pre><pre xml:space="preserve" style="color: #008000;">For setidx = 1 To nrsets</pre><pre xml:space="preserve" style="color: #008000;">&#160;</pre><pre xml:space="preserve" style="color: #008000;">nrnames ? NrTreeItems "2D Seismics`*#$setidx$"</pre><pre xml:space="preserve" style="color: #008000;">For nameidx = 1 To nrnames</pre><pre xml:space="preserve" style="color: #008000;">&#160;</pre><pre xml:space="preserve" style="color: #008000;">nrattrs ? NrTreeItems "2D Seismics`*#$setidx$`*#$nameidx$"</pre><pre xml:space="preserve" style="color: #008000;">For attridx = 1 To nrattrs</pre><pre xml:space="preserve" style="color: #008000;">&#160;</pre><pre xml:space="preserve" style="color: #008000;">dumpAttribute( setidx, nameidx, attridx )</pre><pre xml:space="preserve" style="color: #008000;">Rof</pre><pre xml:space="preserve" style="color: #008000;">Rof</pre><pre xml:space="preserve" style="color: #008000;">Rof</pre>
        <p>&#160;</p>
        <p><b><a name="Standard_test_scripts"></a>Standard test scripts</b>
        </p>
        <p>In the 'doc' directory of the release, you can find a 'Scripts' subdirectory. It contains the standard test scripts for OpendTect. These test scripts all work on a survey 'F3_Demo', the demo data set for OpendTect.</p>
        <p>&#160;</p>
        <p>The directory contains several scripts, many of which can be run stand-alone, but certainly not all. There is also an execute-all script: 'AllScripts.cmd'. Another composite script is 'AllAttributes.cmd', which will make snapshots in the Snapshots directory. This Snapshots directory is created automatically; the location is your_surveys/F3_Demo/Snapshots. The snapshots are created as an index followed by the file name.</p>
        <p>&#160;</p>
        <p>Another script is 'ExportData.cmd'. While running this script an 'Export' directory is automatically created as a subdirectory of 'F3_Demo'. All the exported data will be stored in the above directory.</p>
        <p>&#160;</p>
        <p>Some scripts are dependent on PlugIns like SSIS, VMB etc. These scripts are located in dgb/doc/Scripts. To run these scripts you should make sure the related plugins are loaded.</p>
        <p>&#160;</p>
        <p><b><a name="User_history_recording"></a>User history recording</b>
        </p>
        <p>The CmdDriver plugin also offers the possibility to record the user action history in the background from the moment OpendTect is started. It will be stored in the file userhistory.odcmdin the Proc directory of the starting survey. It is not guaranteed that the Command Driver can offer a full reproduction of the past by running this file, since not all possible user actions are covered yet. Mouse actions performed in 3D scenes or 2D viewers are recorded nor executed for the time being. Actions performed in the Command Controller window are recorded, but not executed as long as the difficulty of calling the Command Driver recursively has not been solved. Nevertheless, the recorded history can be of great help in reproducing a bug or crash reported by the user.</p>
        <p>&#160;</p>
        <p>In order to enable recording of the user history, the user setting dTect.User history buffer must be set with a value other than zero. The magnitude of this value defines the size (in characters) of the buffer in which the user actions are stored temporarily. A positive size value means flushing the content of the buffer to file every time it overflows. A negative size value means dropping the oldest content once the buffer starts overflowing, and flushing only the newest actions to file when OpendTect finally exits or crashes. The menu item Utilities-&gt;Settings-&gt;Advanced-&gt;Personal settings will pop-up a dialog in which this user setting can be added or adapted.</p>
        <p>&#160;</p>
        <p><![CDATA[ 	]]></p>
    </body>
</html>