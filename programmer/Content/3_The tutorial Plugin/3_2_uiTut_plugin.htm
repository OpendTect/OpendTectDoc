<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <h2>3.2 uiTut plugin<MadCap:concept term="uiTut plugin" /></h2>
        <p>In <span style="font-family: monospace;">uiTut</span>, the GUI consists of two parts. One deals with opening an independent dialog box via a menu item in the 'Utilities' menu. The other part gets the 'Tutorial' attribute listed in the 'Edit Attributes' dialog and creates the input fields in the same dialog box. It also sends the input parameters to Tutorial for attribute computation</p>
        <p>Let us first have a look at the independent dialog part which in turn has two parts -- one for seismic tools and the other for horizon tools. The only interesting part is the <span style="font-family: monospace;">uiIOObjSel</span> class which allows you to select an item from a set -- a horizon or a seismic cube ( subclass <span style="font-family: monospace;">uiSeisSel</span> is used for seismic cube selection).</p>
        <p>Both <span style="font-family: monospace;">uiSeisTools</span> and <span style="font-family: monospace;">uiHorTools</span> use the class <span style="font-family: monospace;">uiTaskRunner</span>, which triggers the Executor's in the Tut plugin. The class <span style="font-family: monospace;">uiTaskRunner</span> also displays a progress bar which keeps the user informed about the progress of the process.</p>
        <p>Now we come to the attribute part. In the uitutorialattrib.cc file we see that although <span style="font-family: monospace;">uiAttrDescEd</span> is not a <span style="font-family: monospace;">uiDialog</span> like the the <span style="font-family: monospace;">uiHorTools</span>, it still is a valid parent (being a <span style="font-family: monospace;">uiGroup</span>) for the various UI elements. A nice feature of OpendTect is clear from the first line in the constructor: the <span style="font-family: monospace;">inpfld</span> is a special Attribute UI class which is handled just like any pre-defined <span style="font-family: monospace;">uiBase</span> or <span style="font-family: monospace;">uiTools</span> class. This illustrates that in the OpendTect GUI system, not only pre-made GUI elements are 'first class' - new objects with different shape and behavior attached will be usable transparently by any other GUI class.</p>
        <p>Coming to the plugin 'main' file uitutpi.cc, like any typical UI plugin, <span style="font-family: monospace;">uiTut</span> is a LATE plugin, which means that it will be loaded only after the rest of the UI is already in place. Thus, you must not put <span style="font-family: monospace;">mDefODPluginEarlyLoad()</span>.</p>
        <p>Then comes the second 'special' plugin function <span style="font-family: monospace;">GetxxxPluginInfo()</span>. You may want to refer to the definition of the class PluginInfo for a better understanding of the above function. It allows the plugin manager to make this info available to the world.</p>
        <p style="font-family: monospace;text-align: left;">mDefODPluginInfo(uiTut)<br />{<br />&#160;&#160;&#160;&#160;DefineStaticLocalObject( PluginInfo, retpi,(<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"Tutorial plugin",<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"OpendTect",<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"dGB (Raman/Bert)",<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"3.2",<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"Shows some simple plugin development basics."<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;"\nCan be loaded into od_main only." };<br />&#160;&#160;&#160;&#160;return &amp;retpi;<br />}</p>
        <p>And the last 'special' function is the one which gets things going:</p>
        <p style="font-family: monospace;text-align: left;">mDefODInitPlugin(uiTut)<br />{<br />&#160;&#160;&#160;&#160;mDefineStaticLocalObject( PtrMan, theinst_, = 0 );<br />&#160;&#160;&#160;&#160;if ( theinst_ ) return 0;<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;theinst_ = new uiTutMgr( ODMainWin() );<br />&#160;&#160;&#160;&#160;if ( !theinst_ )<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return "Cannot instantiate Tutorial plugin";<br /><br />&#160;&#160;&#160;&#160;uiTutorialAttrib::initClass();<br />&#160;&#160;&#160;&#160;TutHelpProvider::initClass();<br />&#160;&#160;&#160;&#160;return 0;<br />}</p>
    </body>
</html>